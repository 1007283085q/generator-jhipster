/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-use-before-define */
// eslint-disable-next-line spaced-comment
/// <reference types="cypress" />

// ***********************************************
// Begin Specific Selector Attributes for Cypress
// ***********************************************

// Entity
export const entityTableSelector = '[data-cy="entityTable"]';
export const entityCreateButtonSelector = '[data-cy="entityCreateButton"]';
export const entityCreateSaveButtonSelector = '[data-cy="entityCreateSaveButton"]';
export const entityDetailsButtonSelector = '[data-cy="entityDetailsButton"]'; // can return multiple elements
export const entityDetailsBackButtonSelector = '[data-cy="entityDetailsBackButton"]';
export const entityEditButtonSelector = '[data-cy="entityEditButton"]';
export const entityDeleteButtonSelector = '[data-cy="entityDeleteButton"]';
export const entityConfirmDeleteButtonSelector = '[data-cy="entityConfirmDeleteButton"]';

// ***********************************************
// End Specific Selector Attributes for Cypress
// ***********************************************

Cypress.Commands.add('getEntityHeading', (entityName: string) => {
  return cy.get(`[data-cy="${entityName}Heading"]`);
});

Cypress.Commands.add('getEntityCreateUpdateHeading', (entityName: string) => {
  return cy.get(`[data-cy="${entityName}CreateUpdateHeading"]`);
});

Cypress.Commands.add('getEntityDetailsHeading', (entityInstanceName: string) => {
  return cy.get(`[data-cy="${entityInstanceName}DetailsHeading"]`);
});

Cypress.Commands.add('getEntityDeleteDialogHeading', (entityInstanceName: string) => {
  return cy.get(`[data-cy="${entityInstanceName}DeleteDialogHeading"]`);
});

Cypress.Commands.add('setFieldNumberOfEntity', (fieldName: string, number: number) => {
  return cy.get(`[data-cy="${fieldName}"]`).type(`${number}`);
});

Cypress.Commands.add('setFieldLocalDateOfEntity', (fieldName: string, date: string) => {
  // format should be like : '2001-01-01'
  return cy.get(`[data-cy="${fieldName}"]`).type(`${date}`);
});

Cypress.Commands.add('setFieldTimestampOfEntity', (fieldName: string, timestamp: string) => {
  // format should be like : '2001-01-01T02:30'
  return cy.get(`[data-cy="${fieldName}"]`).type(`${timestamp}`);
});

Cypress.Commands.add('setFieldDurationOfEntity', (fieldName: string, duration: string) => {
  // format should be like : 'PT12S'
  return cy.get(`[data-cy="${fieldName}"]`).type(`${duration}`);
});

Cypress.Commands.add('setFieldBooleanOfEntity', (fieldName: string) => {
  return cy.get(`[data-cy="${fieldName}"]`).click();
});

Cypress.Commands.add('setFieldTextAsBytesOfEntity', (fieldName: string, bytes: any) => {
  return cy.get(`[data-cy="${fieldName}"]`).type(`${bytes}`);
});

Cypress.Commands.add('setFieldImageAsBytesOfEntity', (fieldName: string, fileName: string, mimeType: string) => {
  // fileName is the image which you have already put in cypress fixture folder
  // should be like : 'integration-test.png', 'image/png'
  cy.fixture(fileName).as('image')
    .get(`[data-cy="${fieldName}"]`).then(function(el) {
      return Cypress.Blob.base64StringToBlob(this.image, mimeType)
        .then(blob => {
          let file = new File([blob], fileName, { type: mimeType });
          let list = new DataTransfer();
          list.items.add(file);
          let myFileList = list.files;
          el[0].files = myFileList;
          el[0].dispatchEvent(new Event('change', {bubbles: true}))
        })
    });
});

Cypress.Commands.add('setFieldEnumToLastOfEntity', (fieldName: string) => {
  return cy.get(`[data-cy="${fieldName}"]`)
    .find('option').last()
    .then($els => $els.get(0).setAttribute('selected', 'selected'))
    .parent()
    .trigger('change');
});

Cypress.Commands.add('setFieldUuidOfEntity', (fieldName: string, uuid: string) => {
  // should be like : '64c99148-3908-465d-8c4a-e510e3ade974'
  return cy.get(`[data-cy="${fieldName}"]`).type(`${uuid}`);
});

Cypress.Commands.add('setFieldNumberAsStringOfEntity', (fieldName: string, number: string) => {
  // should be like : '5'
  return cy.get(`[data-cy="${fieldName}"]`).type(`${number}`);
});

Cypress.Commands.add('setFieldSelectToLastOfEntity', (fieldName: string) => {
  return cy.get(`[data-cy="${fieldName}"] option`).then((options : any) => {
    const elements = [...options].map(o => o.label);
    const lastElement = elements.length - 1;
    cy.get(`[data-cy="${fieldName}"]`).select(elements[lastElement]).type('{downarrow}');
  });
});

declare global {
  namespace Cypress {
    interface Chainable<Subject> {
      getEntityHeading(entityName: string): Cypress.Chainable;
      getEntityCreateUpdateHeading(entityName: string): Cypress.Chainable;
      getEntityDetailsHeading(entityInstanceName: string): Cypress.Chainable;
      getEntityDeleteDialogHeading(entityInstanceName: string): Cypress.Chainable;
      setFieldNumberOfEntity(fieldName: string, number: number): Cypress.Chainable;
      setFieldLocalDateOfEntity(fieldName: string, date: string): Cypress.Chainable;
      setFieldTimestampOfEntity(fieldName: string, timestamp: string): Cypress.Chainable;
      setFieldDurationOfEntity(fieldName: string, duration: string): Cypress.Chainable;
      setFieldBooleanOfEntity(fieldName: string): Cypress.Chainable;
      setFieldTextAsBytesOfEntity (fieldName: string, bytes: any): Cypress.Chainable;
      setFieldImageAsBytesOfEntity(fieldName: string, fileName: string, mimeType: string): Cypress.Chainable;
      setFieldEnumToLastOfEntity(fieldName: string): Cypress.Chainable;
      setFieldUuidOfEntity(fieldName: string, uuid: string): Cypress.Chainable;
      setFieldNumberAsStringOfEntity(fieldName: string, bytes: any): Cypress.Chainable;
      setFieldSelectToLastOfEntity(fieldName: string): Cypress.Chainable;
    }
  }
}

// Convert this to a module instead of script (allows import/export)
export {};
