import {integer, required, minLength, maxLength, pattern} from 'vuelidate/lib/validators'
import axios from 'axios'
import {SERVER_API_URL} from "../../<%_ if (clientRootFolder) { _%>../<%_ } _%>constants";
<%_
    let include = false;
    for (idx in fields) {
    const fieldName = fields[ idx ].fieldName;
    const fieldType = fields[idx].fieldType;
    if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType) && !include) {
        include = true;
        _%>
import moment from 'moment'
    <%_ }
} _%>

const <%= entityAngularName %>Update =  {
    data() {
        return {
            <%= entityInstance %>: {
                <%_ for (idx in fields) {
                    const fieldName = fields[idx].fieldName;
                _%>
                <%= fieldName %>: null,
                <%_ } _%>
            },
            <%_ for (idx in relationships) {
                const otherEntityName = relationships[idx].otherEntityName;
            _%>
                    <%= otherEntityName %>s: [],
            <%_ } _%>
            isSaving: false
        }
    },
    validations: {
        <%= entityInstance %>: {
            <%_ for (idx in fields) {
                const fieldName = fields[idx].fieldName;
                const fieldType = fields[idx].fieldType;
                _%>
                <%= fieldName %>:  {
                    <%_ if (fields[idx].fieldValidate === true) { _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('required')) { _%>
                            required,
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('minlength')) { _%>
                            minLength: minLength(<%= fields[idx].fieldValidateRulesMinlength %>),
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('maxlength')) { _%>
                            maxLength: maxLength(<%= fields[idx].fieldValidateRulesMaxlength %>),
                        <%_ } _%>
                        <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
                            integer
                        <%_ } _%>

                    <%_ } _%>
                },
            <%_ } _%>
        }
    },
    beforeRouteEnter (to, from, next) {
        next(vm => {
            if (to.params.<%= entityInstance %>Id) {
                vm.retrieve<%= entityAngularName %>(to.params.<%= entityInstance %>Id);
            } else {
                for (var key in vm.<%= entityInstance %>) {
                    vm.<%= entityInstance %>[key] = null;
                }
            }
            <%_ if (relationships.length > 0) { _%>
            vm.initRelationships();
            <%_ } _%>
        });
    },
    methods: {
        save() {
            let vm = this;
            this.isSaving = true;
            <%_ for (idx in fields) {
                const fieldName = fields[ idx ].fieldName;
                const fieldType = fields[idx].fieldType;
                if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType)) { _%>
                    this.<%= entityInstance %>.<%= fieldName %> = moment(this.<%= entityInstance %>.<%= fieldName %>, 'YYYY-MM-DDTHH:mm');
                <%_ }
            } _%>
            if (this.<%= entityInstance %>.id) {
                axios.put(SERVER_API_URL + 'api/<%= entityInstance %>s', this.<%= entityInstance %>).then(() => {
                    vm.$router.go(-1);
                    vm.isSaving = false;
                });
            } else {
                axios.post(SERVER_API_URL + 'api/<%= entityInstance %>s', this.<%= entityInstance %>).then(() => {
                    vm.$router.go(-1);
                    vm.isSaving = false;
                });
            }
        },
        retrieve<%= entityAngularName %>(<%= entityInstance %>Id) {
            let vm = this;
            axios.get(SERVER_API_URL + 'api/<%= entityInstance %>s/' + <%= entityInstance %>Id).then(res => {
                vm.<%= entityInstance %> = res.data;

                <%_ for (idx in fields) {
                    const fieldName = fields[ idx ].fieldName;
                    const fieldType = fields[idx].fieldType;
                    if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType)) { _%>
                        vm.<%= entityInstance %>.<%= fieldName %> = moment(vm.<%= entityInstance %>.<%= fieldName %>, 'YYYY-MM-DDTHH:mm:ssZ').format('YYYY-MM-DDTHH:mm');
                    <%_ }
                } _%>
            });
        },
        previousState() {
            this.$router.go(-1);
        },
        initRelationships() {
            let vm = this;
            <%_ for (idx in relationships) {
                const otherEntityName = relationships[idx].otherEntityName;
            _%>
            axios.get(SERVER_API_URL + 'api/<%= otherEntityName %>s').then(res => {
                vm.<%= otherEntityName %>s = res.data;
            });
            <%_ } _%>
        }
    }
}

export default <%= entityAngularName %>Update;
