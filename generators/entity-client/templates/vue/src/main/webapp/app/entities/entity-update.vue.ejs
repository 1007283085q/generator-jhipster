<template>
    <div class="row justify-content-center">
        <div class="col-8">
            <form name="editForm" role="form" novalidate v-on:submit.prevent="save()" >
                <h2 id="jhi-<%= entityInstance %>-heading" v-text="$t('<%= angularAppName  %>.<%= entityInstance %>.home.createOrEditLabel')">Create or edit a <%= entityAngularName %></h2>
                <div>
                    <!--<jhi-alert-error></jhi-alert-error>-->
                    <div class="form-group" v-if="<%= entityInstance %>.id">
                        <label for="id" v-text="$t('global.field.id')">ID</label>
                        <input type="text" class="form-control" id="id" name="id"
                               v-model="<%= entityInstance %>.id" readonly />
                    </div>
                    
                    <%_ for (idx in fields) {
                        const fieldName = fields[idx].fieldName;
                        const fieldNameCapitalized = fields[idx].fieldNameCapitalized;
                        const fieldNameHumanized = fields[idx].fieldNameHumanized;
                        const fieldType = fields[idx].fieldType;
                        const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
                        let fieldInputType = 'text';
                        let ngModelOption = '';
                        const translationKey = `${i18nKeyPrefix}.${fieldName}`;
                        if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) {
                            fieldInputType = 'number';
                        } else if (fieldType === 'LocalDate') {
                            fieldInputType = 'date';
                        } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) {
                            fieldInputType = 'datetime-local';
                        } else if (fieldType === 'Boolean') {
                            fieldInputType = 'checkbox';
                        } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') {
                            fieldInputType = 'hidden';
                        }
                    _%>
                    <div class="form-group">
                        <label class="form-control-label" v-text="$t('<%= translationKey %>')" for="field_<%= fieldName %>"<% if (fields[idx].javadoc) { if (enableTranslation) { %> [ngbTooltip]="'<%= i18nKeyPrefix %>.help.<%= fieldName %>' | translate"<% } else { %> ngbTooltip="<%= fields[idx].javadoc %>"<% } } %>><%= fieldNameHumanized %></label>
                        <%_ if (fields[idx].fieldIsEnum) { _%>
                        <select class="form-control" name="<%= fieldName %>" :class="{'valid': !$v.<%= entityInstance %>.<%= fieldName %>.$invalid, 'invalid': $v.<%= entityInstance %>.<%= fieldName %>.$invalid }" v-model="$v.<%= entityInstance %>.<%= fieldName %>.$model" id="field_<%= fieldName %>" <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %> required<% } %>>
                        <%_ const enumPrefix = angularAppName + '.'+ fieldType;
                            const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
                            for (key in values) {
                                const value = values[key]; _%>
                            <option value="<%= value %>"><% if (enableTranslation) { %>{{'<%=enumPrefix%>.<%=value%>' | translate}}<% } else { %><%=value%><% } %></option>
                            <%_ } _%>
                        </select>
                        <%_ } else { _%>
                        <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
                        <div>
                            <%_ if (fieldTypeBlobContent === 'image') { _%>
                            <img v-bind:src="'data:' + <%=entityInstance %>.<%=fieldName%>ContentType + ';base64,' + <%=entityInstance %>.<%=fieldName%>" style="max-height: 100px;" v-if="<%= entityInstance %>.<%= fieldName %>" alt="<%=entityInstance %> image"/>
                            <%_ } _%>
                            <div v-if="<%= entityInstance %>.<%= fieldName %>" class="form-text text-danger clearfix">
                                <%_ if (fieldTypeBlobContent === 'any') { _%>
                                <a class="pull-left" v-on:click="openFile(<%= entityInstance %>.<%= fieldName %>ContentType, <%= entityInstance %>.<%= fieldName %>)" v-text="$t('entity.action.open')">open</a><br>
                                <span class="pull-left">{{<%= entityInstance %>.<%= fieldName %>ContentType}}, {{byteSize(<%= entityInstance %>.<%= fieldName %>)}}</span>
                                <%_ } else { _%>
                                <span class="pull-left">{{<%= entityInstance %>.<%= fieldName %>ContentType}}, {{byteSize(<%= entityInstance %>.<%= fieldName %>)}}</span>
                                <%_ } _%>
                                <%_ if (fieldTypeBlobContent === 'image') { _%>
                                <button type="button" v-on:click="clearInputImage('<%= fieldName %>', '<%= fieldName %>ContentType', 'fileImage')" class="btn btn-secondary btn-xs pull-right">
                                <%_ } else { _%>
                                <button type="button" v-on:click="<%= entityInstance %>.<%= fieldName %>=null;<%= entityInstance %>.<%= fieldName %>ContentType=null;"
                                        class="btn btn-secondary btn-xs pull-right">
                                <%_ } _%>
                                    <font-awesome-icon icon="'times'"></font-awesome-icon>
                                </button>
                            </div>
                            <input type="file" id="file_<%= fieldName %>" v-on:change="setFileData($event, <%= entityInstance %>, '<%= fieldName %>', <% if (fieldTypeBlobContent === 'image') { %>true)" accept="image/*" v-text="$t('entity.action.addimage')"<% } else { %>false)" v-text="$t('entity.action.addblob')"<% } %>/>
                        </div>
                        <%_ } _%>
                        <%_ if (fieldType === 'LocalDate') { _%>
                        <div class="input-group">
                            <input id="field_<%= fieldName %>" type="date" class="form-control" name="<%= fieldName %>"  :class="{'valid': !$v.<%= entityInstance %>.<%= fieldName %>.$invalid, 'invalid': $v.<%= entityInstance %>.<%= fieldName %>.$invalid }" v-model="$v.<%= entityInstance %>.<%= fieldName %>.$model" <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %> required<% } %> />

                            <span class="input-group-append">
                                <button type="button" class="btn btn-secondary" v-on:click="<%= fieldName %>Dp.toggle()"><font-awesome-icon icon="'calendar-alt'"></font-awesome-icon></button>
                            </span>
                        </div>
                        <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                        <div class="d-flex">
                            <input id="field_<%= fieldName %>" type="datetime-local" class="form-control" name="<%= fieldName %>" :class="{'valid': !$v.<%= entityInstance %>.<%= fieldName %>.$invalid, 'invalid': $v.<%= entityInstance %>.<%= fieldName %>.$invalid }" v-model="$v.<%= entityInstance %>.<%= fieldName %>.$model" <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %> required<% } %>/>
                        </div>
                        <%_ } else if (fieldTypeBlobContent === 'text') { _%>
                        <textarea class="form-control" name="<%= fieldName %>" id="field_<%= fieldName %>"
                            :class="{'valid': !$v.<%= entityInstance %>.<%= fieldName %>.$invalid, 'invalid': $v.<%= entityInstance %>.<%= fieldName %>.$invalid }" v-model="$v.<%= entityInstance %>.<%= fieldName %>.$model" <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %> required<% } %>></textarea>
                        <%_ } else { _%>
                        <input type="<%= fieldInputType %>" class="form-control" name="<%= fieldName %>" id="field_<%= fieldName %>"
                            :class="{'valid': !$v.<%= entityInstance %>.<%= fieldName %>.$invalid, 'invalid': $v.<%= entityInstance %>.<%= fieldName %>.$invalid }" v-model="$v.<%= entityInstance %>.<%= fieldName %>.$model" <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %> required<% } %>/>
                            <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
                        <input type="hidden" class="form-control" name="<%= fieldName %>ContentType" id="field_<%= fieldName %>ContentType"
                            v-model="<%= entityInstance %>.<%= fieldName %>ContentType" />
                            <%_ } _%>
                        <%_ } _%>
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidate === true) { _%>
                        <div v-if="$v.<%= entityInstance %>.<%= fieldName %>.$anyDirty && $v.<%= entityInstance %>.<%= fieldName %>.$invalid">
                            <%_ if (fields[idx].fieldValidateRules.includes('required')) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.required" v-text="$t('entity.validation.required')">
                                    This field is required.
                                </small>
                            <%_ } _%>
                            <%_ if (fields[idx].fieldValidateRules.includes('minlength')) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.minlength" v-text="$t('entity.validation.minlength')">
                                    This field is required to be at least <%= fields[idx].fieldValidateRulesMinlength %> characters.
                                </small>
                            <%_ } _%>
                            <%_ if (fields[idx].fieldValidateRules.includes('maxlength')) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.maxlength" v-text="$t('entity.validation.maxlength')">
                                    This field cannot be longer than <%= fields[idx].fieldValidateRulesMaxlength %> characters.
                                </small>
                            <%_ } _%>
                            <%_ if (fields[idx].fieldValidateRules.includes('min')) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.min" v-text="$t('entity.validation.min')">
                                    This field should be at least <%= fields[idx].fieldValidateRulesMin %> characters.
                                </small>
                            <%_ } _%>
                            <%_ if (fields[idx].fieldValidateRules.includes('max')) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.max" v-text="$t('entity.validation.max')">
                                    This field cannot be longer than <%= fields[idx].fieldValidateRulesMax %> characters.
                                </small>
                            <%_ } _%>
                            <%_ if (fields[idx].fieldValidateRules.includes('minbytes')) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.minbytes" v-text="$t('entity.validation.minbytes')">
                                    This field should be at least <%= fields[idx].fieldValidateRulesMinbytes %> characters.
                                </small>
                            <%_ } _%>
                            <%_ if (fields[idx].fieldValidateRules.includes('maxbytes')) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.maxbytes" v-text="$t('entity.validation.maxbytes')">
                                    This field should be at least <%= fields[idx].fieldValidateRulesMaxbytes %> characters.
                                </small>
                            <%_ } _%>
                            <%_ if (fields[idx].fieldValidateRules.includes('pattern')) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.pattern" v-text="$t('entity.validation.pattern')">
                                    This field should follow pattern for "<%= fieldNameHumanized %>".
                                </small>
                            <%_ } _%>
                            <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.number" v-text="$t('entity.validation.number')">
                                    This field should be a number.
                                </small>
                            <%_ } _%>
                            <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                                <small class="form-text text-danger" v-if="!$v.<%= entityInstance %>.<%= fieldName %>.ZonedDateTimelocal" v-text="$t('entity.validation.ZonedDateTimelocal')">
                                    This field should be a date and time.
                                </small>
                            <%_ } _%>
                        </div>
                        <%_ } _%>
                    </div>
                    <%_ } _%>
                    
                </div>
                <div>
                    <button type="button" id="cancel-save" class="btn btn-secondary" v-on:click="previousState()">
                        <font-awesome-icon icon="ban"></font-awesome-icon>&nbsp;<span v-text="$t('entity.action.cancel')">Cancel</span>
                    </button>
                    <button type="submit" id="save-entity" :disabled="$v.<%= entityInstance %>.$invalid || isSaving" class="btn btn-primary">
                        <font-awesome-icon icon="save"></font-awesome-icon>&nbsp;<span v-text="$t('entity.action.save')">Save</span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</template>
<script>
    import {integer, required} from 'vuelidate/lib/validators'
    import axios from 'axios'
    import {SERVER_API_URL} from "../../constants";

    export default {
        data() {
            return {
                <%= entityInstance %>: {
                    <%_ for (idx in fields) {
                        const fieldName = fields[idx].fieldName;
                    _%>
                    <%= fieldName %>: null,
                    <%_ } _%>
                },
                isSaving: false
            }
        },
        validations: {
            <%= entityInstance %>: {
                <%_ for (idx in fields) {
                    const fieldName = fields[idx].fieldName;
                    const validate = fields[idx].fieldValidate;
                    _%>
                    <%= fieldName %>:  {
                        <%_ if (fields[idx].fieldValidate === true) { _%>
                            <%_ if (fields[idx].fieldValidateRules.includes('required')) { _%>
                                required,
                            <%_ } _%>
                            <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
                                integer
                            <%_ } _%>

                        <%_ } _%>
                    },
                <%_ } _%>
            }
        },
        beforeRouteEnter (to, from, next) {
            next(vm => {
                if (to.params.<%= entityInstance %>Id) {
                    vm.retrieve<%= entityAngularName %>(to.params.<%= entityInstance %>Id);
                }
            })
        },
        methods: {
            save() {
                let vm = this;
                this.isSaving = true;
                if (this.<%= entityInstance %>.id) {
                    axios.put(SERVER_API_URL + 'api/<%= entityInstance %>s', this.<%= entityInstance %>).then(() => {
                        vm.$router.go(-1);
                        vm.isSaving = false;
                    });
                } else {
                    axios.post(SERVER_API_URL + 'api/<%= entityInstance %>s', this.<%= entityInstance %>).then(() => {
                        vm.$router.go(-1);
                        vm.isSaving = false;
                    });
                }
            },
            retrieve<%= entityAngularName %>(<%= entityInstance %>Id) {
                let vm = this;
                axios.get(SERVER_API_URL + 'api/<%= entityInstance %>s/' + <%= entityInstance %>Id).then(res => {
                    vm.<%= entityInstance %> = res.data;
                });
            },
            previousState() {
                this.$router.go(-1);
            }
        }
    }
</script>
