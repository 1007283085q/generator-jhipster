<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.security.oauth2;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.servlet.http.Cookie;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

/**
 * Test the {@link CookieCollection}.
 */
public class CookieCollectionTest {
    public static final String COOKIE_NAME = "chocolate";
    public static final String COOKIE_VALUE = "yummy";
    public static final String BROWNIE_NAME = "brownie";
    private Cookie cookie;
    private Cookie cupsCookie;
    private Cookie brownieCookie;

    @BeforeEach
    public void setUp() throws Exception {
        cookie = new Cookie(COOKIE_NAME, COOKIE_VALUE);
        cupsCookie = new Cookie("cups", "delicious");
        brownieCookie = new Cookie(BROWNIE_NAME, "mmh");
    }

    @Test
    public void size() throws Exception {
        CookieCollection cookies = new CookieCollection();
        Assertions.assertEquals(0, cookies.size());
        cookies.add(cookie);
        Assertions.assertEquals(1, cookies.size());
    }

    @Test
    public void isEmpty() throws Exception {
        CookieCollection cookies = new CookieCollection();
        Assertions.assertTrue(cookies.isEmpty());
        cookies.add(cookie);
        Assertions.assertFalse(cookies.isEmpty());
    }

    @Test
    public void contains() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie);
        Assertions.assertTrue(cookies.contains(cookie));
        Assertions.assertTrue(cookies.contains(COOKIE_NAME));
        Assertions.assertFalse(cookies.contains("yuck"));
    }

    @Test
    public void iterator() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie);
        Iterator<Cookie> it = cookies.iterator();
        Assertions.assertTrue(it.hasNext());
        Assertions.assertEquals(cookie, it.next());
        Assertions.assertFalse(it.hasNext());
    }

    @Test
    public void toArray() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie);
        Cookie[] array = cookies.toArray();
        Assertions.assertEquals(cookies.size(), array.length);
        Assertions.assertEquals(cookie, array[0]);
    }

    @Test
    public void toArray1() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie);
        Cookie[] array = new Cookie[cookies.size()];
        cookies.toArray(array);
        Assertions.assertEquals(cookies.size(), array.length);
        Assertions.assertEquals(cookie, array[0]);
    }

    @Test
    public void add() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie);
        Cookie newCookie = new Cookie(BROWNIE_NAME, "mmh");
        cookies.add(newCookie);
        Assertions.assertEquals(2, cookies.size());
        Assertions.assertTrue(cookies.contains(newCookie));
        Assertions.assertTrue(cookies.contains(BROWNIE_NAME));
    }

    @Test
    public void addAgain() {
        CookieCollection cookies = new CookieCollection(cookie, brownieCookie, cupsCookie);
        Cookie white = new Cookie(COOKIE_NAME, "white");
        boolean modified = cookies.add(white);
        Assertions.assertTrue(modified);
        Assertions.assertEquals(white, cookies.get(COOKIE_NAME));
        Assertions.assertTrue(cookies.contains(white));
        Assertions.assertFalse(cookies.contains(cookie));
        Assertions.assertTrue(cookies.contains(COOKIE_NAME));
    }

    @Test
    public void get() {
        CookieCollection cookies = new CookieCollection(cookie, brownieCookie, cupsCookie);
        Cookie c = cookies.get(COOKIE_NAME);
        Assertions.assertNotNull(c);
        Assertions.assertEquals(cookie, c);
    }

    @Test
    public void remove() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie, brownieCookie, cupsCookie);
        cookies.remove(cookie);
        Assertions.assertEquals(2, cookies.size());
        Assertions.assertFalse(cookies.contains(cookie));
        Assertions.assertFalse(cookies.contains(COOKIE_NAME));
        Assertions.assertTrue(cookies.contains(brownieCookie));
        Assertions.assertTrue(cookies.contains(BROWNIE_NAME));
    }

    @Test
    public void containsAll() throws Exception {
        List<Cookie> content = Arrays.asList(cookie, brownieCookie);
        CookieCollection cookies = new CookieCollection(content);
        Assertions.assertTrue(cookies.containsAll(content));
        Assertions.assertTrue(cookies.containsAll(Collections.singletonList(cookie)));
        Assertions.assertFalse(cookies.containsAll(Arrays.asList(cookie, brownieCookie, cupsCookie)));
        Assertions.assertTrue(cookies.containsAll(Arrays.asList(COOKIE_NAME, BROWNIE_NAME)));
    }

    @Test
    @SuppressWarnings("unchecked")
    public void addAll() throws Exception {
        CookieCollection cookies = new CookieCollection();
        List<Cookie> content = Arrays.asList(cookie, brownieCookie, cupsCookie);
        boolean modified = cookies.addAll(content);
        Assertions.assertTrue(modified);
        Assertions.assertEquals(3, cookies.size());
        Assertions.assertTrue(cookies.containsAll(content));
        Assertions.assertFalse(cookies.addAll(Collections.EMPTY_LIST));
    }

    @Test
    public void removeAll() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie, brownieCookie, cupsCookie);
        boolean modified = cookies.removeAll(Arrays.asList(brownieCookie, cupsCookie));
        Assertions.assertTrue(modified);
        Assertions.assertEquals(1, cookies.size());
        Assertions.assertFalse(cookies.contains(brownieCookie));
        Assertions.assertFalse(cookies.contains(cupsCookie));
        Assertions.assertFalse(cookies.removeAll(Collections.EMPTY_LIST));
    }

    @Test
    public void removeAllByName() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie, brownieCookie, cupsCookie);
        boolean modified = cookies.removeAll(Arrays.asList(COOKIE_NAME, BROWNIE_NAME));
        Assertions.assertTrue(modified);
        Assertions.assertEquals(1, cookies.size());
        Assertions.assertFalse(cookies.contains(brownieCookie));
        Assertions.assertFalse(cookies.contains(cookie));
        Assertions.assertFalse(cookies.removeAll(Collections.EMPTY_LIST));
    }

    @Test
    public void retainAll() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie, brownieCookie, cupsCookie);
        List<Cookie> content = Arrays.asList(cookie, brownieCookie);
        boolean modified = cookies.retainAll(content);
        Assertions.assertTrue(modified);
        Assertions.assertEquals(2, cookies.size());
        Assertions.assertTrue(cookies.containsAll(content));
        Assertions.assertFalse(cookies.contains(cupsCookie));
        Assertions.assertFalse(cookies.retainAll(content));
    }

    @Test
    public void clear() throws Exception {
        CookieCollection cookies = new CookieCollection(cookie);
        cookies.clear();
        Assertions.assertTrue(cookies.isEmpty());
    }
}
