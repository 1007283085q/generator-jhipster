<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.config.apidoc;

import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import io.github.jhipster.config.apidoc.customizer.SwaggerCustomizer;
import org.springframework.stereotype.Component;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.service.ApiKey;
import springfox.documentation.service.AuthorizationScope;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.service.SecurityScheme;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;

import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

import static com.google.common.collect.Lists.newArrayList;
import static springfox.documentation.builders.PathSelectors.regex;

@Component
public class SwaggerSecurityCustomizer implements SwaggerCustomizer {
<%_ if (applicationType === 'monolith' || applicationType === 'gateway') { _%>

    private static final String[] PUBLIC_ENDPOINTS = {
        "/api/account/change-password",
        "/api/account/reset-password/finish",
        "/api/account/reset-password/init",
        "/api/activate",
        "/api/authenticate",
        "/api/register"
    };
<%_ } _%>

    @Override
    public void customize(Docket docket) {
        docket
            .securitySchemes(newArrayList(bearerScheme()))
        <%_ if (applicationType === 'monolith' || applicationType === 'gateway') { _%>
            .securityContexts(newArrayList(new SecurityContext(bearerAuth(), not(PUBLIC_ENDPOINTS))));
        <%_ } _%>
        <%_ if (applicationType === 'microservice') { _%>
            .securityContexts(newArrayList(new SecurityContext(bearerAuth(), regex("/api.*"))));
        <%_ } _%>
    }

<%_ if (applicationType === 'monolith' || applicationType === 'gateway') { _%>
    @SuppressWarnings("unchecked")
    private Predicate<String> not(String... paths) {
        Predicate[] regexPredicates = Stream.of(paths)
            .map(PathSelectors::regex)
            .toArray(Predicate[]::new);

        Predicate publicPathsRegex = Predicates.or(regexPredicates);
        return Predicates.not(publicPathsRegex);
    }
<%_ } _%>

    /**
     * Bearer security scheme of the entire json spec file
     * @return a Security Scheme
     */
    private SecurityScheme bearerScheme() {
        return new ApiKey("Bearer", "Authorization", "header");
    }

    /**
     * Builds a list with a unique Bearer security context
     * security:
     *  - Bearer: []
     *
     * @return a singleton list with one Bearer security reference
     */
    private List<SecurityReference> bearerAuth() {
        return Collections.singletonList(new SecurityReference("Bearer", new AuthorizationScope[0]));
    }

}
