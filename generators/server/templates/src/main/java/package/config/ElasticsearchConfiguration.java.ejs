<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config;

<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.context.annotation.Bean;
<%_ } _%>
import org.springframework.context.annotation.Configuration;
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;
import org.springframework.data.elasticsearch.core.mapping.ElasticsearchPersistentProperty;
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchPersistentProperty;
import org.springframework.data.mapping.PersistentEntity;
import org.springframework.data.mapping.model.Property;
import org.springframework.data.mapping.model.SimpleTypeHolder;
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchPersistentEntity;
<%_ } _%>

@Configuration
public class ElasticsearchConfiguration {
<%_ if (databaseType === 'mongodb') { _%>

    @Bean
    SimpleElasticsearchMappingContext mappingContext() {
        return new CustomElasticsearchMappingContext();
    }
<%_ } _%>
}
<%_ if (databaseType === 'mongodb') { _%>

/**
 * Custom mapping context in order to use the same entities for both MongoDB and Elasticsearch datasources
 */
class CustomElasticsearchMappingContext extends SimpleElasticsearchMappingContext {

    @Override
    protected ElasticsearchPersistentProperty createPersistentProperty(Property property, SimpleElasticsearchPersistentEntity owner, SimpleTypeHolder simpleTypeHolder) {
        return new CustomElasticsearchPersistentProperty(property, owner, simpleTypeHolder);
    }
}

class CustomElasticsearchPersistentProperty extends SimpleElasticsearchPersistentProperty {

    @SuppressWarnings({"unchecked"})
    public CustomElasticsearchPersistentProperty(Property property, PersistentEntity owner, SimpleTypeHolder simpleTypeHolder) {
        super(property, owner, simpleTypeHolder);
    }

    @Override
    public boolean isAssociation() {
        return false;
    }
}
<%_ } _%>
