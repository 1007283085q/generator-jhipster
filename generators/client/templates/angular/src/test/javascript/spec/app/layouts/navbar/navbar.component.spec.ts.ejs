jest.mock('@angular/router');
<%_ if (enableTranslation) { _%>
jest.mock('ngx-webstorage');
jest.mock('ng-jhipster');
<% } %>
jest.mock('app/core/auth/account.service');
jest.mock('app/core/login/login.service');

import { ComponentFixture, TestBed, async } from '@angular/core/testing';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { Router } from '@angular/router';
import { of } from 'rxjs';
<%_ if (enableTranslation) { _%>
import { SessionStorageService } from 'ngx-webstorage';
import { JhiLanguageService } from 'ng-jhipster';
<% } %>

import { ProfileInfo } from 'app/layouts/profiles/profile-info.model';
import { NavbarComponent } from 'app/layouts/navbar/navbar.component';
import { AccountService } from 'app/core/auth/account.service';
import { ProfileService } from 'app/layouts/profiles/profile.service';
import { LoginService } from 'app/core/login/login.service';

describe('Component Tests', () => {
    describe('Navbar Component', () => {
        let comp: NavbarComponent;
        let fixture: ComponentFixture<NavbarComponent>;
        let mockAccountService: AccountService;
        let profileService: ProfileService;

        beforeEach(async(() => {
            TestBed.configureTestingModule({
                imports: [HttpClientTestingModule],
                declarations: [NavbarComponent],
                providers: [AccountService, <% if (enableTranslation) { %>SessionStorageService, JhiLanguageService, <% } %>Router, LoginService]
            })
            .overrideTemplate(NavbarComponent, '')
            .compileComponents();
        }));

        beforeEach(() => {
            fixture = TestBed.createComponent(NavbarComponent);
            comp = fixture.componentInstance;
            mockAccountService = TestBed.inject(AccountService);
            profileService = TestBed.inject(ProfileService);
        });

        it('Should call profileService.getProfileInfo on init', () => {
            // GIVEN
            spyOn(profileService, 'getProfileInfo').and.returnValue(of(new ProfileInfo()));

            // WHEN
            comp.ngOnInit();

            // THEN
            expect(profileService.getProfileInfo).toHaveBeenCalled();
        });

        it('Should call accountService.isAuthenticated on authentication', () => {
            // WHEN
            comp.isAuthenticated();

            // THEN
            expect(mockAccountService.isAuthenticated).toHaveBeenCalled();
        });
    });
});
