jest.mock('app/core/auth/account.service');
<%_ if (authenticationType !== 'oauth2') { _%>
jest.mock('app/core/login/login-modal.service');
<% } else { %>
jest.mock('app/core/login/login.service');
<%_ } _%>

import { ComponentFixture, TestBed, async } from '@angular/core/testing';
import { of } from 'rxjs';

import { HomeComponent } from 'app/home/home.component';
import { AccountService } from 'app/core/auth/account.service';
<%_ if (authenticationType !== 'oauth2') { _%>
import { LoginModalService } from 'app/core/login/login-modal.service';
<% } else { %>
import { LoginService } from 'app/core/login/login.service';
<%_ } _%>

describe('Component Tests', () => {
    describe('Home Component', () => {
        let comp: HomeComponent;
        let fixture: ComponentFixture<HomeComponent>;
        let mockAccountService: AccountService;
        <%_ if (authenticationType !== 'oauth2') { _%>
        let mockLoginModalService: LoginModalService;
        <%_ } _%>

        beforeEach(async(() => {
            TestBed.configureTestingModule({
                declarations: [HomeComponent],
                providers: [AccountService, <% if (authenticationType !== 'oauth2') { %>LoginModalService<% } else { %>LoginService<% } %>]
            })
            .overrideTemplate(HomeComponent, '')
            .compileComponents();
        }));

        beforeEach(() => {
            fixture = TestBed.createComponent(HomeComponent);
            comp = fixture.componentInstance;
            mockAccountService = TestBed.inject(AccountService);
            mockAccountService.identity = jest.fn(() => of(null));
            mockAccountService.getAuthenticationState = jest.fn(() => of(null));
            <%_ if (authenticationType !== 'oauth2') { _%>
            mockLoginModalService = TestBed.inject(LoginModalService);
            <%_ } _%>
        });

        <%_ if (authenticationType !== 'oauth2') { _%>
        it('Should call accountService.getAuthenticationState on init', () => {
            // WHEN
            comp.ngOnInit();

            // THEN
            expect(mockAccountService.getAuthenticationState).toHaveBeenCalled();
        });
        <%_ } _%>

        it('Should call accountService.isAuthenticated when it checks authentication', () => {
            // WHEN
            comp.isAuthenticated();

            // THEN
            expect(mockAccountService.isAuthenticated).toHaveBeenCalled();
        });

        <%_ if (authenticationType !== 'oauth2') { _%>
        it('Should call loginModalService.open on login', () => {
            // WHEN
            comp.login();

            // THEN
            expect(mockLoginModalService.open).toHaveBeenCalled();
        });
        <%_ } _%>
    });
});
