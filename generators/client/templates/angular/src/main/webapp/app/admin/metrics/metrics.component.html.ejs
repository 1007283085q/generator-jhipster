<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<div>
    <h2>
        <span id="metrics-page-heading" jhiTranslate="metrics.title">Application Metrics</span>
        <button class="btn btn-primary float-right" (click)="refresh()">
            <fa-icon [icon]="'sync'"></fa-icon> <span jhiTranslate="metrics.refresh.button">Refresh</span>
        </button>
    </h2>

    <h3 jhiTranslate="metrics.jvm.title">JVM Metrics</h3>
    <div class="row" *ngIf="!updatingMetrics">
        <div class="col-md-4">
            <b jhiTranslate="metrics.jvm.memory.title">Memory</b>
            <div *ngFor="let entry of metrics['jvm'] | keys">
                <p><span>{{entry.key}}</span> ({{entry.value.used / 1048576 | number:'1.0-0'}}M / {{entry.value.max / 1048576 | number:'1.0-0'}}M)</p>
                <ngb-progressbar type="success" [max]="entry.value.max" [value]="entry.value.used" [striped]="true" [animated]="false">
                    <span>{{entry.value.used * 100 / entry.value.max  | number:'1.0-0'}}%</span>
                </ngb-progressbar>
            </div>
        </div>
        <div class="col-md-4">
            <b jhiTranslate="metrics.jvm.threads.title">Threads</b> (Total: {{threadStats.threadDumpAll}}) <a class="hand" (click)="refreshThreadDumpData()" data-toggle="modal" data-target="#threadDump"><fa-icon [icon]="'eye'"></fa-icon></a>
            <p><span jhiTranslate="metrics.jvm.threads.runnable">Runnable</span> {{threadStats.threadDumpRunnable}}</p>
            <ngb-progressbar [value]="threadStats.threadDumpRunnable" [max]="threadStats.threadDumpAll" [striped]="true" [animated]="false" type="success">
                <span>{{threadStats.threadDumpRunnable * 100 / threadStats.threadDumpAll  | number:'1.0-0'}}%</span>
            </ngb-progressbar>
            <p><span jhiTranslate="metrics.jvm.threads.timedwaiting">Timed Waiting</span> ({{threadStats.threadDumpTimedWaiting}})</p>
            <ngb-progressbar [value]="threadStats.threadDumpTimedWaiting" [max]="threadStats.threadDumpAll" [striped]="true" [animated]="false" type="warning">
                <span>{{threadStats.threadDumpTimedWaiting * 100 / threadStats.threadDumpAll  | number:'1.0-0'}}%</span>
            </ngb-progressbar>
            <p><span jhiTranslate="metrics.jvm.threads.waiting">Waiting</span> ({{threadStats.threadDumpWaiting}})</p>
            <ngb-progressbar [value]="threadStats.threadDumpWaiting" [max]="threadStats.threadDumpAll" [striped]="true" [animated]="false" type="warning">
                <span>{{threadStats.threadDumpWaiting * 100 / threadStats.threadDumpAll  | number:'1.0-0'}}%</span>
            </ngb-progressbar>
            <p><span jhiTranslate="metrics.jvm.threads.blocked">Blocked</span> ({{threadStats.threadDumpBlocked}})</p>
            <ngb-progressbar [value]="threadStats.threadDumpBlocked" [max]="threadStats.threadDumpAll" [striped]="true" [animated]="false" type="success">
                <span>{{threadStats.threadDumpBlocked * 100 / threadStats.threadDumpAll  | number:'1.0-0'}}%</span>
            </ngb-progressbar>
        </div>
        <!-- <div class="col-md-4">
            <b jhiTranslate="metrics.jvm.gc.title">Garbage collections</b>
            <div class="row" *ngIf="metrics.gauges['jvm.garbage.PS-MarkSweep.count']">
                <div class="col-md-9" jhiTranslate="metrics.jvm.gc.marksweepcount">Mark Sweep count</div>
                <div class="col-md-3 text-right">{{metrics.gauges['jvm.garbage.PS-MarkSweep.count'].value}}</div>
            </div>
            <div class="row" *ngIf="metrics.gauges['jvm.garbage.PS-MarkSweep.time']">
                <div class="col-md-9" jhiTranslate="metrics.jvm.gc.marksweeptime">Mark Sweep time</div>
                <div class="col-md-3 text-right">{{metrics.gauges['jvm.garbage.PS-MarkSweep.time'].value}}ms</div>
            </div>
            <div class="row" *ngIf="metrics.gauges['jvm.garbage.PS-Scavenge.count']">
                <div class="col-md-9" jhiTranslate="metrics.jvm.gc.scavengecount">Scavenge count</div>
                <div class="col-md-3 text-right">{{metrics.gauges['jvm.garbage.PS-Scavenge.count'].value}}</div>
            </div>
            <div class="row" *ngIf="metrics.gauges['jvm.garbage.PS-Scavenge.time']">
                <div class="col-md-9" jhiTranslate="metrics.jvm.gc.scavengetime">Scavenge time</div>
                <div class="col-md-3 text-right">{{metrics.gauges['jvm.garbage.PS-Scavenge.time'].value}}ms</div>
            </div>
        </div> -->
    </div>
    <div class="well well-lg" *ngIf="updatingMetrics" jhiTranslate="metrics.updating">Updating...</div>

    <h3 jhiTranslate="metrics.jvm.http.title">HTTP requests (events per second)</h3>
    <!-- <p *ngIf="metrics.counters">
        <span jhiTranslate="metrics.jvm.http.active">Active requests</span> <b>{{metrics.counters['com.codahale.metrics.servlet.InstrumentedFilter.activeRequests'].count | number:'1.0-0'}}</b> - <span jhiTranslate="metrics.jvm.http.total">Total requests</span> <b>{{metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count | number:'1.0-0'}}</b>
    </p> -->
    <div class="table-responsive" *ngIf="!updatingMetrics">
        <table class="table table-striped">
            <thead>
            <tr>
                <th jhiTranslate="metrics.jvm.http.table.code">Code</th>
                <th jhiTranslate="metrics.jvm.http.table.count">Count</th>
                <th class="text-right" jhiTranslate="metrics.jvm.http.table.mean">Mean</th>
            </tr>
            </thead>
            <tbody>
                <tr *ngFor="let entry of metrics['http.server.requests'] | keys">
                <td>{{entry.key}}</td>
                <td>
                    <ngb-progressbar [max]="metrics['http.server.requests.all'].count" [value]="entry.value.count" [striped]="true" [animated]="false" type="success">
                        <span>{{entry.value.count}}</span>
                    </ngb-progressbar>
                </td>
                <td class="text-right">
                    {{filterNaN(entry.value.mean) | number:'1.0-2'}}
                </td>
                <td class="text-right">{{entry.value.max | number:'1.0-2'}}</td>
            </tbody>
        </table>
    </div>

    <h3 jhiTranslate="metrics.servicesstats.title">Services statistics (time in millisecond)</h3>
    <div class="table-responsive" *ngIf="!updatingMetrics">
        <table class="table table-striped">
            <thead>
            <tr>
                <th jhiTranslate="metrics.servicesstats.table.name">Service name</th>
                <th class="text-right" jhiTranslate="metrics.servicesstats.table.count">Count</th>
                <th class="text-right" jhiTranslate="metrics.servicesstats.table.mean">Mean</th>
                <th class="text-right" jhiTranslate="metrics.servicesstats.table.min">Min</th>
                <th class="text-right" jhiTranslate="metrics.servicesstats.table.p50">p50</th>
                <th class="text-right" jhiTranslate="metrics.servicesstats.table.p75">p75</th>
                <th class="text-right" jhiTranslate="metrics.servicesstats.table.p95">p95</th>
                <th class="text-right" jhiTranslate="metrics.servicesstats.table.p99">p99</th>
                <th class="text-right" jhiTranslate="metrics.servicesstats.table.max">Max</th>
            </tr>
            </thead>
            <tbody>
            <tr *ngFor="let entry of servicesStats | keys">
                <td>{{entry.key}}</td>
                <td class="text-right">{{entry.value.count}}</td>
                <td class="text-right">{{entry.value.mean * 1024 | number:'1.0-0'}}</td>
                <td class="text-right">{{entry.value.min * 1024 | number:'1.0-0'}}</td>
                <td class="text-right">{{entry.value.p50 * 1024 | number:'1.0-0'}}</td>
                <td class="text-right">{{entry.value.p75 * 1024 | number:'1.0-0'}}</td>
                <td class="text-right">{{entry.value.p95 * 1024 | number:'1.0-0'}}</td>
                <td class="text-right">{{entry.value.p99 * 1024 | number:'1.0-0'}}</td>
                <td class="text-right">{{entry.value.max * 1024 | number:'1.0-0'}}</td>
            </tr>
            </tbody>
        </table>
    </div>
<% if (['ehcache', 'infinispan'].includes(cacheProvider)) { %>
    <h3 jhiTranslate="metrics.cache.title">Cache statistics</h3>
    <div class="table-responsive" *ngIf="!updatingMetrics">
        <table class="table table-striped">
            <thead>
            <tr>
                <th jhiTranslate="metrics.cache.cachename">Cache name</th>
                <th class="text-right" data-translate="metrics.cache.hits">Cache Hits</th>
                <th class="text-right" data-translate="metrics.cache.misses">Cache Misses</th>
                <th class="text-right" data-translate="metrics.cache.gets">Cache Gets</th>
                <th class="text-right" data-translate="metrics.cache.puts">Cache Puts</th>
                <th class="text-right" data-translate="metrics.cache.removals">Cache Removals</th>
                <th class="text-right" data-translate="metrics.cache.evictions">Cache Evictions</th>
                <th class="text-right" data-translate="metrics.cache.hitPercent">Cache Hit %</th>
                <th class="text-right" data-translate="metrics.cache.missPercent">Cache Miss %</th>
            </tr>
            </thead>
            <tbody>
            <tr *ngFor="let entry of metrics.cache | keys">
                <td>{{entry.key}}</td>
                <td class="text-right">{{entry.value['cache.gets.hit']}}</td>
                <td class="text-right">{{entry.value['cache.gets.miss']}}</td>
                <td class="text-right">{{entry.value['cache.gets.hit'] + entry.value['cache.gets.miss']}}</td>
                <td class="text-right">{{entry.value['cache.puts']}}</td>
                <td class="text-right">{{entry.value['cache.removals']}}</td>
                <td class="text-right">{{entry.value['cache.evictions']}}</td>
                <td class="text-right">{{filterNaN(100*entry.value['cache.gets.hit']/(entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'])) | number : '1.0-4' }}</td>
                <td class="text-right">{{filterNaN(100*entry.value['cache.gets.miss']/(entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'])) | number : '1.0-4' }}</td>
            </tr>
            </tbody>
        </table>
    </div>
<%_ } _%>
    <h3 jhiTranslate="metrics.datasource.title">DataSource statistics (time in millisecond)</h3>
    <div class="table-responsive" *ngIf="!updatingMetrics">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th><span jhiTranslate="metrics.datasource.usage">Usage</span> ({{metrics.databases.active.value}} / {{metrics.databases.max.value}})</th>
                    <th class="text-right" jhiTranslate="metrics.datasource.count">Count</th>
                    <th class="text-right" jhiTranslate="metrics.datasource.mean">Mean</th>
                    <th class="text-right" jhiTranslate="metrics.datasource.max">Max</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <div class="progress progress-striped">
                            <ngb-progressbar [max]="metrics.databases.max.value" [value]="metrics.databases.active.value" [striped]="true" [animated]="false" type="success">
                                <span>{{metrics.databases.active.value * 100 / metrics.databases.max.value  | number:'1.0-0'}}%</span>
                            </ngb-progressbar>
                        </div>
                    </td>
                    <td class="text-right">{{metrics.databases.usage.count}}</td>
                    <td class="text-right">{{filterNaN(metrics.databases.usage.mean) | number:'1.0-2'}}</td>
                    <td class="text-right">{{filterNaN(metrics.databases.usage.max) | number:'1.0-2'}}</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
