<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { Injectable, SecurityContext, NgZone } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
<%_ if (enableTranslation) { _%>
import { TranslateService } from '@ngx-translate/core';
<%_ } _%>

export type AlertType = 'success' | 'danger' | 'warning' | 'info';

export interface Alert {
  id?: number;
  type: AlertType;
  msg: string;
  params?: any;
  timeout?: number;
  toast?: boolean;
  position?: string;
  scoped?: boolean;
  close?: (alerts: Alert[]) => void;
}

@Injectable({
  providedIn: 'root',
})
export class AlertService {
  // unique id for each alert. Starts from 0.
  private alertId = 0;
  private alerts: Alert[] = [];
  private timeout = 5000;
  private toast = false;

  constructor(
    private sanitizer: DomSanitizer,
    private ngZone: NgZone,
    <%_ if (enableTranslation) { _%>
    private translateService: TranslateService,
    <%_ } _%>
  ) {}

  clear(): void {
    this.alerts.splice(0, this.alerts.length);
  }

  get(): Alert[] {
    return this.alerts;
  }

  success(msg: string, params?: any, position?: string): Alert {
    return this.createAlert('success', msg, params, position);
  }

  error(msg: string, params?: any, position?: string): Alert {
    return this.createAlert('danger', msg, params, position);
  }

  warning(msg: string, params?: any, position?: string): Alert {
    return this.createAlert('warning', msg, params, position);
  }

  info(msg: string, params?: any, position?: string): Alert {
    return this.createAlert('info', msg, params, position);
  }

  addAlert(alertOptions: Alert, extAlerts: Alert[]): Alert {
    alertOptions.id = this.alertId++;
    <%_ if (enableTranslation) { _%>
    if (alertOptions.msg) {
      alertOptions.msg = this.translateService.instant(alertOptions.msg, alertOptions.params);
    }
    <%_ } _%>
    const alert = this.factory(alertOptions);
    if (alertOptions.timeout && alertOptions.timeout > 0) {
      // Workaround protractor waiting for setTimeout.
      // Reference https://www.protractortest.org/#/timeouts
      this.ngZone.runOutsideAngular(() => {
        setTimeout(() => {
          this.ngZone.run(() => {
            this.closeAlert(alertOptions.id!, extAlerts);
          });
        }, alertOptions.timeout);
      });
    }
    return alert;
  }

  closeAlert(id: number, extAlerts?: Alert[]): Alert[] {
    const thisAlerts: Alert[] = extAlerts && extAlerts.length > 0 ? extAlerts : this.alerts;
    return this.closeAlertByIndex(thisAlerts.map(e => e.id).indexOf(id), thisAlerts);
  }

  closeAlertByIndex(index: number, thisAlerts: Alert[]): Alert[] {
    return thisAlerts.splice(index, 1);
  }

  isToast(): boolean {
    return this.toast;
  }

  private factory(alertOptions: Alert): Alert {
    const alert: Alert = {
      type: alertOptions.type,
      msg: this.sanitizer.sanitize(SecurityContext.HTML, alertOptions.msg) ?? '',
      id: alertOptions.id,
      timeout: alertOptions.timeout,
      toast: alertOptions.toast,
      position: alertOptions.position ?? 'top right',
      scoped: alertOptions.scoped,
      close: (alerts: Alert[]) => this.closeAlert(alertOptions.id!, alerts),
    };
    if (!alert.scoped) {
      this.alerts.push(alert);
    }
    return alert;
  }

  private createAlert(type: AlertType, msg: string, params?: any, position?: string): Alert {
    return this.addAlert(
      {
        type,
        msg,
        params,
        timeout: this.timeout,
        toast: this.isToast(),
        position,
      },
      []
    );
  }
}
