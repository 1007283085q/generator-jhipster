module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(p) { return p; },
        peg$c1 = function(ed, p) {return {"entities" : concat([ed],p.entities) , "relationships" : p.relationships, "enums" : p.enums, "dto": p.dto, "pagination": p.pagination, "service": service, "microservice": microservice};},
        peg$c2 = function(rd, p) {return {"entities" : p.entities, "relationships" : flattenArray(concat([rd],p.relationships)), "enums" : p.enums, "dto": p.dto, "pagination": p.pagination, "service": service, "microservice": microservice};},
        peg$c3 = function(end, p) {return {"entities" : p.entities, "relationships" : p.relationships, "enums": concat([end], p.enums), "dto": p.dto, "pagination": p.pagination, "service": service, "microservice": microservice};},
        peg$c4 = function(dto, p) {return {"entities": p.entities, "relationships": p.relationships, "enums": p.enums, "dto": p.dto, "pagination": p.pagination, "service": service, "microservice": microservice};},
        peg$c5 = function(pagination, p) {return {"entities" : p.entities, "relationships" : p.relationships, "enums": p.enums, "dto": p.dto, "pagination": p.pagination, "service": service, "microservice": microservice};},
        peg$c6 = function(service, p) {return {"entities" : p.entities, "relationships" : p.relationships, "enums": p.enums, "dto": p.dto, "pagination": p.pagination, "service": service, "microservice": microservice};},
        peg$c7 = function(p) {return {"entities" : p.entities,"relationships": p.relationships, "enums": p.enums, "dto": p.dto, "pagination": p.pagination, "service": service, "microservice": microservice};},
        peg$c8 = function(microservice, p) {return {"entities" : p.entities, "relationships" : p.relationships, "enums": p.enums, "dto": p.dto, "pagination": p.pagination, "service": service, "microservice": microservice};},
        peg$c9 = "",
        peg$c10 = function() {return {"entities" : entities,"relationships": relationships, "enums": enums, "dto": dto, "pagination": pagination, "service": service, "microservice": microservice};},
        peg$c11 = "entity",
        peg$c12 = { type: "literal", value: "entity", description: "\"entity\"" },
        peg$c13 = function(jd, e, tableName, eb) {return {"name" : e, tableName: tableName ? tableName : e, "body":eb, "javadoc":jd};},
        peg$c14 = function(e, eb) {return {"name" : e, "body":eb, "javadoc":""};},
        peg$c15 = "(",
        peg$c16 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c17 = /^[A-z0..9_\-]/,
        peg$c18 = { type: "class", value: "[A-z0..9_-]", description: "[A-z0..9_-]" },
        peg$c19 = ")",
        peg$c20 = { type: "literal", value: ")", description: "\")\"" },
        peg$c21 = function(name) {return name.join('');},
        peg$c22 = "{",
        peg$c23 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c24 = "}",
        peg$c25 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c26 = function(fdl) {return fdl;},
        peg$c27 = function() {return [];},
        peg$c28 = ",",
        peg$c29 = { type: "literal", value: ",", description: "\",\"" },
        peg$c30 = function(com, f, t, vl, fdl) {return concat([{"name" : f, "type" : t, "validations" : vl, "javadoc": com}], fdl );},
        peg$c31 = function(com, f, t, vl) {return [{"name" : f, "type" : t, "validations" : vl, "javadoc": com}];},
        peg$c32 = function(v, vl) {return concat([v], vl);},
        peg$c33 = "relationship",
        peg$c34 = { type: "literal", value: "relationship", description: "\"relationship\"" },
        peg$c35 = function(rt, rb, subrb) {rb.cardinality = rt; addCardinalityToRelationships(rt, subrb); return concat([rb], subrb);},
        peg$c36 = function(rb, morerb) { return concat([rb], morerb); },
        peg$c37 = function(rb) { return rb; },
        peg$c38 = "to",
        peg$c39 = { type: "literal", value: "to", description: "\"to\"" },
        peg$c40 = function(from, to) {return {"from" : from , "to" : to};},
        peg$c41 = function(jd, e, i) {return {"name" :e, "injectedfield" : i, "javadoc": jd};},
        peg$c42 = function(jd, e) {return {"name" :e, "injectedfield" : null, "javadoc": jd};},
        peg$c43 = function(e) {return {"name" :e, "injectedfield" : null, "javadoc": ''};},
        peg$c44 = "enum",
        peg$c45 = { type: "literal", value: "enum", description: "\"enum\"" },
        peg$c46 = function(e, el) {return {"name":e, "values" : el };},
        peg$c47 = function(e, el) {return concat([e],el);},
        peg$c48 = function(e) {return [e];},
        peg$c49 = "except",
        peg$c50 = { type: "literal", value: "except", description: "\"except\"" },
        peg$c51 = function(sub) {return sub;},
        peg$c52 = function(e, sub) {return concat([e], sub);},
        peg$c53 = "dto",
        peg$c54 = { type: "literal", value: "dto", description: "\"dto\"" },
        peg$c55 = function(decl, ex) {
          dto[decl[decl.length - 1]] = dto[decl[decl.length - 1]] || { list: [], excluded: [] };
          concat(dto[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
            concat(dto[decl[decl.length - 1]].excluded, ex);
          }
        },
        peg$c56 = "*",
        peg$c57 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c58 = "with",
        peg$c59 = { type: "literal", value: "with", description: "\"with\"" },
        peg$c60 = /^[A-z\-]/,
        peg$c61 = { type: "class", value: "[A-z-]", description: "[A-z-]" },
        peg$c62 = function(method) {return ['*', method.toString().replace(/,/g,'')];},
        peg$c63 = "all",
        peg$c64 = { type: "literal", value: "all", description: "\"all\"" },
        peg$c65 = function(e, method) {return [e, method.toString().replace(/,/g,'')];},
        peg$c66 = "paginate",
        peg$c67 = { type: "literal", value: "paginate", description: "\"paginate\"" },
        peg$c68 = function(decl, ex) {
          pagination[decl[decl.length - 1]] = pagination[decl[decl.length - 1]] || { list: [], excluded: [] };
          concat(pagination[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
            concat(pagination[decl[decl.length - 1]].excluded, ex);
          }
        },
        peg$c69 = "service",
        peg$c70 = { type: "literal", value: "service", description: "\"service\"" },
        peg$c71 = function(decl, ex) {
          service[decl[decl.length - 1]] = service[decl[decl.length - 1]] || { list: [], excluded: [] };
          concat(service[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
            concat(service[decl[decl.length - 1]].excluded, ex);
          }
        },
        peg$c72 = "microservice",
        peg$c73 = { type: "literal", value: "microservice", description: "\"microservice\"" },
        peg$c74 = function(decl, ex) {
          microservice[decl[decl.length - 1]] = microservice[decl[decl.length - 1]] || { list: [], excluded: [] };
          concat(microservice[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
            concat(microservice[decl[decl.length - 1]].excluded, ex);
          }
        },
        peg$c75 = /^[A-z0-9\-]/,
        peg$c76 = { type: "class", value: "[A-z0-9-]", description: "[A-z0-9-]" },
        peg$c77 = "OneToOne",
        peg$c78 = { type: "literal", value: "OneToOne", description: "\"OneToOne\"" },
        peg$c79 = function() {return "one-to-one";},
        peg$c80 = "OneToMany",
        peg$c81 = { type: "literal", value: "OneToMany", description: "\"OneToMany\"" },
        peg$c82 = function() {return "one-to-many";},
        peg$c83 = "ManyToOne",
        peg$c84 = { type: "literal", value: "ManyToOne", description: "\"ManyToOne\"" },
        peg$c85 = function() {return "many-to-one";},
        peg$c86 = "ManyToMany",
        peg$c87 = { type: "literal", value: "ManyToMany", description: "\"ManyToMany\"" },
        peg$c88 = function() {return "many-to-many";},
        peg$c89 = { type: "other", description: "a type" },
        peg$c90 = /^[A-Z]/,
        peg$c91 = { type: "class", value: "[A-Z]", description: "[A-Z]" },
        peg$c92 = /^[a-zA-Z0-9]/,
        peg$c93 = { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
        peg$c94 = function(head, tail) {return makeString(concat([head],tail));},
        peg$c95 = "required",
        peg$c96 = { type: "literal", value: "required", description: "\"required\"" },
        peg$c97 = function() {return {key:'required', value:''};},
        peg$c98 = "minlength",
        peg$c99 = { type: "literal", value: "minlength", description: "\"minlength\"" },
        peg$c100 = function(int) {return {key:'minlength', value:int};},
        peg$c101 = "maxlength",
        peg$c102 = { type: "literal", value: "maxlength", description: "\"maxlength\"" },
        peg$c103 = function(int) {return {key:'maxlength', value:int};},
        peg$c104 = "minbytes",
        peg$c105 = { type: "literal", value: "minbytes", description: "\"minbytes\"" },
        peg$c106 = "maxbytes",
        peg$c107 = { type: "literal", value: "maxbytes", description: "\"maxbytes\"" },
        peg$c108 = "max",
        peg$c109 = { type: "literal", value: "max", description: "\"max\"" },
        peg$c110 = function(int) {return {key:'max', value:int};},
        peg$c111 = "min",
        peg$c112 = { type: "literal", value: "min", description: "\"min\"" },
        peg$c113 = function(int) {return {key:'min', value:int};},
        peg$c114 = "pattern",
        peg$c115 = { type: "literal", value: "pattern", description: "\"pattern\"" },
        peg$c116 = function(regexp) {return {key:'pattern' , value:regexp};},
        peg$c117 = { type: "other", description: "apostrophe" },
        peg$c118 = /^["|']/,
        peg$c119 = { type: "class", value: "[\"|']", description: "[\"|']" },
        peg$c120 = { type: "other", description: "a regular expression" },
        peg$c121 = /^[a-zA-Z0-9!@#$%\^&*()_+\-=[\]{};':\\|,.<>\/? ]/,
        peg$c122 = { type: "class", value: "[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};':\\\\|,.<>\\/? ]", description: "[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};':\\\\|,.<>\\/? ]" },
        peg$c123 = function(word) {return makeString(word);},
        peg$c124 = { type: "other", description: "an enum name" },
        peg$c125 = { type: "other", description: "an enum property" },
        peg$c126 = /^[_]/,
        peg$c127 = { type: "class", value: "[_]", description: "[_]" },
        peg$c128 = /^[A-Z0-9]/,
        peg$c129 = { type: "class", value: "[A-Z0-9]", description: "[A-Z0-9]" },
        peg$c130 = /^[A-Z0-9_]/,
        peg$c131 = { type: "class", value: "[A-Z0-9_]", description: "[A-Z0-9_]" },
        peg$c132 = function(underscore, head, tail) {return makeString(concat(concat(underscore,[head]), tail));},
        peg$c133 = { type: "other", description: "integer" },
        peg$c134 = /^[0-9]/,
        peg$c135 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c136 = function(int) {return parseInt(int.join(""), 10);},
        peg$c137 = { type: "other", description: "an injected field" },
        peg$c138 = /^[a-zA-Z]/,
        peg$c139 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c140 = /^[a-zA-Z0-9()]/,
        peg$c141 = { type: "class", value: "[a-zA-Z0-9()]", description: "[a-zA-Z0-9()]" },
        peg$c142 = { type: "other", description: "an entity name" },
        peg$c143 = { type: "other", description: "a field name" },
        peg$c144 = { type: "other", description: "a space" },
        peg$c145 = /^['\n'|'\t'|'\r'|' '|\u2028|\u2029]/,
        peg$c146 = { type: "class", value: "['\\n'|'\\t'|'\\r'|' '|\\u2028|\\u2029]", description: "['\\n'|'\\t'|'\\r'|' '|\\u2028|\\u2029]" },
        peg$c147 = function(nc) {return makeString(nc);},
        peg$c148 = "/*",
        peg$c149 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c150 = /^[*]/,
        peg$c151 = { type: "class", value: "[*]", description: "[*]" },
        peg$c152 = "/",
        peg$c153 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c154 = "//",
        peg$c155 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c156 = /^[^\n\r]/,
        peg$c157 = { type: "class", value: "[^\\n\\r]", description: "[^\\n\\r]" },
        peg$c158 = { type: "any", description: "any character" },
        peg$c159 = function(char) {return char;},

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
          null,
          [{ type: "other", description: description }],
          input.substring(peg$savedPos, peg$currPos),
          peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
          message,
          null,
          input.substring(peg$savedPos, peg$currPos),
          peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
              .replace(/\\/g,   '\\\\')
              .replace(/"/g,    '\\"')
              .replace(/\x08/g, '\\b')
              .replace(/\t/g,   '\\t')
              .replace(/\n/g,   '\\n')
              .replace(/\f/g,   '\\f')
              .replace(/\r/g,   '\\r')
              .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
              .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
              .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
              .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
            ? expectedDescs.slice(0, -1).join(", ")
        + " or "
        + expectedDescs[expected.length - 1]
            : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
          message !== null ? message : buildMessage(expected, found),
          expected,
          found,
          location
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseprog();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseprog() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsespace();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseentityDecl();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsespace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseprog();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c1(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsespace();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsespace();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parserelationDecl();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsespace();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsespace();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseprog();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c2(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsespace();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsespace();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseenumDecl();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsespace();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsespace();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseprog();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c3(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsespace();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsespace();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedtoDecl();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsespace();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsespace();
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseprog();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c4(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parsespace();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsespace();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsepagiDecl();
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parsespace();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsespace();
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseprog();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c5(s2, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsespace();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parsespace();
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseserviceDecl();
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsespace();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parsespace();
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseprog();
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c6(s2, s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parsespace();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsespace();
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseComment();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parsespace();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsespace();
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseprog();
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c7(s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    s2 = peg$parsespace();
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$parsespace();
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseJDLComment();
                      if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parsespace();
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parsespace();
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseprog();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c7(s4);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = [];
                      s2 = peg$parsespace();
                      while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parsespace();
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsemicroserviceDecl1();
                        if (s2 !== peg$FAILED) {
                          s3 = [];
                          s4 = peg$parsespace();
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsespace();
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseprog();
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c8(s2, s4);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$c9;
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c10();
                        }
                        s0 = s1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseentityDecl() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parseComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseJDLComment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c11) {
                s5 = peg$c11;
                peg$currPos += 6;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseENTITYNAME();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseentityTableNameDecl();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseentityBody();
                          if (s11 === peg$FAILED) {
                            s11 = null;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parsespace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parsespace();
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseJDLComment();
                              if (s13 === peg$FAILED) {
                                s13 = null;
                              }
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c13(s1, s7, s9, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c11) {
          s1 = peg$c11;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseENTITYNAME();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsespace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseentityBody();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c14(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseentityTableNameDecl() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c17.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c17.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c19;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c21(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseentityBody() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c22;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseJDLComment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefieldDeclList();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseJDLComment();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c24;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c25); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c26(s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$c9;
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsefieldDeclList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      s0 = peg$currPos;
      s1 = peg$parseJDLComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseComment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseJDLComment();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseFIELDNAME();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsespace();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsetype();
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsevalidationList();
                          if (s11 === peg$FAILED) {
                            s11 = null;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parsespace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parsespace();
                            }
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 44) {
                                s13 = peg$c28;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c29); }
                              }
                              if (s13 === peg$FAILED) {
                                s13 = null;
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = [];
                                s15 = peg$parsespace();
                                while (s15 !== peg$FAILED) {
                                  s14.push(s15);
                                  s15 = peg$parsespace();
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parseJDLComment();
                                  if (s15 === peg$FAILED) {
                                    s15 = null;
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = [];
                                    s17 = peg$parsespace();
                                    while (s17 !== peg$FAILED) {
                                      s16.push(s17);
                                      s17 = peg$parsespace();
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parsefieldDeclList();
                                      if (s17 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c30(s3, s7, s9, s11, s17);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseComment();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseFIELDNAME();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsespace();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsetype();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsespace();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsespace();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsevalidationList();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c31(s1, s3, s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$c9;
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c27();
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsevalidationList() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsevalidation();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalidationList();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c32(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$c9;
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parserelationDecl() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c33) {
        s1 = peg$c33;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserelationshipType();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c22;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c23); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseJDLComment();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parserelationshipBody();
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsesubRelationshipBodies();
                          if (s11 === peg$FAILED) {
                            s11 = null;
                          }
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                              s12 = peg$c24;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c25); }
                            }
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c35(s3, s9, s11);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesubRelationshipBodies() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c28;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parserelationshipBody();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesubRelationshipBodies();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c36(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s1 = peg$c28;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parserelationshipBody();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parserelationshipBody() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parserelationshipSide();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseJDLComment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c38) {
                s5 = peg$c38;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c39); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseJDLComment();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parserelationshipSide();
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseJDLComment();
                          if (s11 === peg$FAILED) {
                            s11 = null;
                          }
                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c40(s1, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserelationshipSide() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseComment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseENTITYNAME();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c22;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c23); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseINJECTEDFIELDNAME();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c24;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c25); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c41(s1, s3, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseComment();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseENTITYNAME();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsespace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                  s6 = peg$c22;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c23); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsespace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsespace();
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c24;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c25); }
                    }
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsespace();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsespace();
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c42(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseENTITYNAME();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsespace();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c43(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseenumDecl() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c44) {
        s1 = peg$c44;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseENUMNAME();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c22;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c23); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseJDLComment();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseenumPropList();
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseJDLComment();
                          if (s11 === peg$FAILED) {
                            s11 = null;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parsespace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parsespace();
                            }
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 125) {
                                s13 = peg$c24;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c25); }
                              }
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c46(s3, s9);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseenumPropList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseENUMPROP();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseJDLComment();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseenumPropList();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c47(s1, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseENUMPROP();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c48(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseexclusion() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c49) {
        s1 = peg$c49;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexclusionSub();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c51(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseexclusionSub() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseENTITYNAME();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexclusionSub();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c52(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseENTITYNAME();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c48(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsedtoDecl() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c53) {
        s1 = peg$c53;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesubDtoDecl();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexclusion();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseJDLComment();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c55(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesubDtoDecl() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseENTITYNAME();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesubDtoDecl();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c52(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c56;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c57); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c58) {
              s3 = peg$c58;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsespace();
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (peg$c60.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c61); }
                }
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c60.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c61); }
                    }
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c62(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c63) {
            s1 = peg$c63;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsespace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsespace();
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c58) {
                s3 = peg$c58;
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c59); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsespace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsespace();
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c60.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c61); }
                  }
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      if (peg$c60.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c61); }
                      }
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c62(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseENTITYNAME();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsespace();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsespace();
              }
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c58) {
                  s3 = peg$c58;
                  peg$currPos += 4;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c59); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parsespace();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parsespace();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    if (peg$c60.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c61); }
                    }
                    if (s6 !== peg$FAILED) {
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        if (peg$c60.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c61); }
                        }
                      }
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c65(s1, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepagiDecl() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesubPagiDecl();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexclusion();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseJDLComment();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c68(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesubPagiDecl() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseENTITYNAME();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesubPagiDecl();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c52(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c56;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c57); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c58) {
              s3 = peg$c58;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsespace();
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (peg$c60.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c61); }
                }
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c60.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c61); }
                    }
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c62(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c63) {
            s1 = peg$c63;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsespace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsespace();
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c58) {
                s3 = peg$c58;
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c59); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsespace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsespace();
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c60.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c61); }
                  }
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      if (peg$c60.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c61); }
                      }
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c62(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseENTITYNAME();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsespace();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsespace();
              }
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c58) {
                  s3 = peg$c58;
                  peg$currPos += 4;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c59); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parsespace();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parsespace();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    if (peg$c60.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c61); }
                    }
                    if (s6 !== peg$FAILED) {
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        if (peg$c60.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c61); }
                        }
                      }
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c65(s1, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseserviceDecl() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c69) {
        s1 = peg$c69;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesubServiceDecl();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexclusion();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseJDLComment();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c71(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesubServiceDecl() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseENTITYNAME();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesubServiceDecl();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c52(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c56;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c57); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c58) {
              s3 = peg$c58;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsespace();
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (peg$c60.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c61); }
                }
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c60.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c61); }
                    }
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c62(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c63) {
            s1 = peg$c63;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsespace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsespace();
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c58) {
                s3 = peg$c58;
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c59); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsespace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsespace();
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c60.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c61); }
                  }
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      if (peg$c60.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c61); }
                      }
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c62(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseENTITYNAME();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsespace();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsespace();
              }
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c58) {
                  s3 = peg$c58;
                  peg$currPos += 4;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c59); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parsespace();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parsespace();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    if (peg$c60.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c61); }
                    }
                    if (s6 !== peg$FAILED) {
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        if (peg$c60.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c61); }
                        }
                      }
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c65(s1, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemicroserviceDecl1() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c72) {
        s1 = peg$c72;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesubMicroserviceDecl1();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexclusion();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseJDLComment();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c74(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesubMicroserviceDecl1() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseENTITYNAME();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesubMicroserviceDecl1();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c52(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c56;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c57); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c58) {
              s3 = peg$c58;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsespace();
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (peg$c75.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c76); }
                }
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c75.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c76); }
                    }
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c62(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c63) {
            s1 = peg$c63;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsespace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsespace();
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c58) {
                s3 = peg$c58;
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c59); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsespace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsespace();
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c75.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                  }
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      if (peg$c75.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c76); }
                      }
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c62(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseENTITYNAME();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsespace();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsespace();
              }
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c58) {
                  s3 = peg$c58;
                  peg$currPos += 4;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c59); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parsespace();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parsespace();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    if (peg$c75.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c76); }
                    }
                    if (s6 !== peg$FAILED) {
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        if (peg$c75.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c76); }
                        }
                      }
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c65(s1, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parserelationshipType() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c77) {
        s1 = peg$c77;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c79();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c80) {
          s1 = peg$c80;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c82();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c83) {
            s1 = peg$c83;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c85();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 10) === peg$c86) {
              s1 = peg$c86;
              peg$currPos += 10;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c87); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c88();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsetype() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c90.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c92.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c92.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c94(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      return s0;
    }

    function peg$parsevalidation() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c95) {
        s1 = peg$c95;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c97();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c98) {
          s1 = peg$c98;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c99); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c15;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsespace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseINTEGER();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsespace();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsespace();
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s7 = peg$c19;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c100(s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c101) {
            s1 = peg$c101;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c102); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsespace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsespace();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s3 = peg$c15;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsespace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsespace();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseINTEGER();
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parsespace();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parsespace();
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s7 = peg$c19;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c103(s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c104) {
              s1 = peg$c104;
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c105); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsespace();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsespace();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s3 = peg$c15;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parsespace();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parsespace();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseINTEGER();
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parsespace();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parsespace();
                      }
                      if (s6 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s7 = peg$c19;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c100(s5);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c106) {
                s1 = peg$c106;
                peg$currPos += 8;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c107); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsespace();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parsespace();
                }
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s3 = peg$c15;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsespace();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parsespace();
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseINTEGER();
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parsespace();
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parsespace();
                        }
                        if (s6 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s7 = peg$c19;
                            peg$currPos++;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s7 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c103(s5);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c108) {
                  s1 = peg$c108;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parsespace();
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsespace();
                  }
                  if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s3 = peg$c15;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c16); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$parsespace();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsespace();
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseINTEGER();
                        if (s5 !== peg$FAILED) {
                          s6 = [];
                          s7 = peg$parsespace();
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            s7 = peg$parsespace();
                          }
                          if (s6 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s7 = peg$c19;
                              peg$currPos++;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s7 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c110(s5);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c111) {
                    s1 = peg$c111;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c112); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsespace();
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parsespace();
                    }
                    if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c15;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c16); }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parsespace();
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          s5 = peg$parsespace();
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseINTEGER();
                          if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parsespace();
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              s7 = peg$parsespace();
                            }
                            if (s6 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s7 = peg$c19;
                                peg$currPos++;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c113(s5);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c114) {
                      s1 = peg$c114;
                      peg$currPos += 7;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c115); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = [];
                      s3 = peg$parsespace();
                      while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsespace();
                      }
                      if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s3 = peg$c15;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c16); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseapostrophe();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseREGEXP();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parseapostrophe();
                              if (s6 !== peg$FAILED) {
                                s7 = [];
                                s8 = peg$parsespace();
                                while (s8 !== peg$FAILED) {
                                  s7.push(s8);
                                  s8 = peg$parsespace();
                                }
                                if (s7 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 41) {
                                    s8 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s8 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c116(s5);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseapostrophe() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c118.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }

      return s0;
    }

    function peg$parseREGEXP() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c121.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c121.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c122); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c123(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }

      return s0;
    }

    function peg$parseENUMNAME() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c90.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c92.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c92.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c94(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c124); }
      }

      return s0;
    }

    function peg$parseENUMPROP() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c126.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c126.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c128.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c130.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c131); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c130.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c131); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c132(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }

      return s0;
    }

    function peg$parseINTEGER() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c134.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c134.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c135); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c136(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }

      return s0;
    }

    function peg$parseINJECTEDFIELDNAME() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c138.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c140.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c140.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c141); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c94(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }

      return s0;
    }

    function peg$parseENTITYNAME() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c90.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c92.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c92.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c94(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }

      return s0;
    }

    function peg$parseFIELDNAME() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c138.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c92.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c92.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c94(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }

      return s0;
    }

    function peg$parsespace() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c145.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c146); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c145.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c146); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseComStart();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseNot_Com();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseNot_Com();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseComStop();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c147(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseComStart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c148) {
        s1 = peg$c148;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c150.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c150.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c151); }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseComStop() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c150.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c150.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c151); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c152;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c153); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseJDLComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c154) {
        s1 = peg$c154;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c156.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c157); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c156.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c157); }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNot_Com() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseComStop();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseComStart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c158); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c159(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }


    function concat(array1, array2){
      if (array2) {
        Array.prototype.push.apply(array1, array2);
      }
      return array1;
    }

    function flattenArray(array) {
      var newArray = [];

      array.forEach(function(element) {
        if (!element.length) {
          newArray.push(element);
        } else {
          element.forEach(function(internalElement) {
            newArray.push(internalElement);
          });
        }
      });

      return newArray;
    }

    function makeString(o) {
      return o.join("");
    }

    function addCardinalityToRelationships(cardinality, relationships) {
      if (!relationships) {
        return;
      }
      relationships.forEach(function(relationship) {
        relationship.cardinality = cardinality;
      });
    }

    var entities = [];
    var relationships = [];
    var enums = [];
    var dto = {};
    var pagination = {};
    var service = {};
    var microservice = {};


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
          null,
          peg$maxFailExpected,
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          peg$maxFailPos < input.length
              ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
              : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
