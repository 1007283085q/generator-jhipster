/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(p) {
          p.applications.reverse();
          return p;
        },
      peg$c1 = function(constantDecl, p) {
          parsed.constants[constantDecl.name] = constantDecl.value;
          return parsed;
        },
      peg$c2 = function(applicationDeclaration, p) {
          parsed.applications.push(applicationDeclaration);
          return parsed;
        },
      peg$c3 = function(ed, p) {
          parsed.entities = addUniqueElements([ed], parsed.entities);
          return parsed;
        },
      peg$c4 = function(rd, p) {
          parsed.relationships = flattenArray(addUniqueElements([rd], parsed.relationships));
          return parsed;
        },
      peg$c5 = function(end, p) {
          parsed.enums = addUniqueElements([end], parsed.enums);
          return parsed;
        },
      peg$c6 = function(dto, p) {
          parsed.dto = dto;
          return parsed;
        },
      peg$c7 = function(pagination, p) {
          parsed.pagination = pagination;
          return parsed;
        },
      peg$c8 = function(service, p) {
          parsed.service = service;
          return parsed;
        },
      peg$c9 = function(p) { return parsed; },
      peg$c10 = function(microservice, p) {
          parsed.microservice = microservice;
          return parsed;
        },
      peg$c11 = function(searchEngine, p) {
          parsed.searchEngine = searchEngine;
          return parsed;
        },
      peg$c12 = function(noClient, p) {
          parsed.noClient = noClient;
          return parsed;
        },
      peg$c13 = function(noServer, p) {
          parsed.noServer = noServer;
          return parsed;
        },
      peg$c14 = function(angularSuffix, p) {
          parsed.angularSuffix = angularSuffix;
          return parsed;
        },
      peg$c15 = function(noFluentMethod, p) {
          parsed.noFluentMethod = noFluentMethod;
          return parsed;
        },
      peg$c16 = function(filter, p) {
          parsed.filter = filter;
          return parsed;
        },
      peg$c17 = function(clientRootFolder, p) {
          parsed.clientRootFolder = clientRootFolder;
          return parsed;
        },
      peg$c18 = "",
      peg$c19 = function() { return parsed; },
      peg$c20 = "{",
      peg$c21 = peg$literalExpectation("{", false),
      peg$c22 = "}",
      peg$c23 = peg$literalExpectation("}", false),
      peg$c24 = function(applicationSubDecl) {
          return applicationSubDecl;
        },
      peg$c25 = function(applicationConfigDecl, applicationSubDecl) {
          applicationSubDecl.config = applicationConfigDecl || {};
          applicationSubDecl.entities = applicationSubDecl.entities || { entityList: [], excluded: [] };
          return applicationSubDecl;
        },
      peg$c26 = "entities",
      peg$c27 = peg$literalExpectation("entities", false),
      peg$c28 = function(entityList, excluded, applicationSubDecl) {
          applicationSubDecl.config = applicationSubDecl.config || {};
          applicationSubDecl.entities = { entityList, excluded };
          return applicationSubDecl;
        },
      peg$c29 = function() { return { config: {}, entities: { entityList: [], excluded: [] } }; },
      peg$c30 = /^[A-z]/,
      peg$c31 = peg$classExpectation([["A", "z"]], false, false),
      peg$c32 = function(baseName, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'baseName', baseName.join(''));
        },
      peg$c33 = "\"",
      peg$c34 = peg$literalExpectation("\"", false),
      peg$c35 = /^[^\n,"]/,
      peg$c36 = peg$classExpectation(["\n", ",", "\""], true, false),
      peg$c37 = function(path, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'path', path.join(''));
        },
      peg$c38 = /^[a-z]/,
      peg$c39 = peg$classExpectation([["a", "z"]], false, false),
      peg$c40 = ".",
      peg$c41 = peg$literalExpectation(".", false),
      peg$c42 = function(packageName, applicationConfigDecl) {
          applicationConfigDecl = addToApplicationDecl(
            applicationConfigDecl,
            'packageName',
            packageName.join('').replace(/,/g, '')
          );
          return addToApplicationDecl(
            applicationConfigDecl,
            'packageFolder',
            applicationConfigDecl.packageName.replace(/[.]/g, '/')
          );
        },
      peg$c43 = function(authenticationType, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'authenticationType', authenticationType.join(''));
        },
      peg$c44 = function(hibernateCache, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'hibernateCache', hibernateCache.join(''));
        },
      peg$c45 = function(clusteredHttpSession, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'clusteredHttpSession', clusteredHttpSession.join(''));
        },
      peg$c46 = function(websocket, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'websocket', websocket.join(''));
        },
      peg$c47 = function(databaseType, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'databaseType', databaseType.join(''));
        },
      peg$c48 = /^[A-z0-9]/,
      peg$c49 = peg$classExpectation([["A", "z"], ["0", "9"]], false, false),
      peg$c50 = function(devDatabaseType, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'devDatabaseType', devDatabaseType.join(''));
        },
      peg$c51 = function(prodDatabaseType, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'prodDatabaseType', prodDatabaseType.join(''));
        },
      peg$c52 = function(useCompass, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'useCompass', useCompass);
        },
      peg$c53 = function(buildTool, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'buildTool', buildTool.join(''));
        },
      peg$c54 = function(searchEngine, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'searchEngine', searchEngine);
        },
      peg$c55 = function(enableTranslation, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'enableTranslation', enableTranslation);
        },
      peg$c56 = function(applicationType, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'applicationType', applicationType.join(''));
        },
      peg$c57 = "[",
      peg$c58 = peg$literalExpectation("[", false),
      peg$c59 = /^[a-z, ]/,
      peg$c60 = peg$classExpectation([["a", "z"], ",", " "], false, false),
      peg$c61 = "]",
      peg$c62 = peg$literalExpectation("]", false),
      peg$c63 = function(testFrameworks, applicationConfigDecl) {
          const testFrameworkEntries = [];
          const results = testFrameworks.join('').split(',');
          for (let i = 0; i < results.length; i++) {
            if (results[i].trim().length !== 0) {
              testFrameworkEntries.push(results[i].trim());
            }
          }
          return addToApplicationDecl(applicationConfigDecl, 'testFrameworks', testFrameworkEntries);
        },
      peg$c64 = function(languages, applicationConfigDecl) {
          const languageEntries = [];
          const results = languages.join('').split(',');
          for (let i = 0; i < results.length; i++) {
            if (results[i].trim().length !== 0) {
              languageEntries.push(results[i].trim());
            }
          }
          return addToApplicationDecl(applicationConfigDecl, 'languages', languageEntries);
        },
      peg$c65 = /^[0-9]/,
      peg$c66 = peg$classExpectation([["0", "9"]], false, false),
      peg$c67 = function(serverPort, applicationConfigDecl) {
        	return addToApplicationDecl(applicationConfigDecl, 'serverPort', parseInt(serverPort.join(''), 10));
        },
      peg$c68 = function(enableSocialSignIn, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'enableSocialSignIn', enableSocialSignIn);
        },
      peg$c69 = function(useSass, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'useSass', useSass);
        },
      peg$c70 = /^[A-z0-9_\-]/,
      peg$c71 = peg$classExpectation([["A", "z"], ["0", "9"], "_", "-"], false, false),
      peg$c72 = function(jhiPrefix, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'jhiPrefix', jhiPrefix.join(''));
        },
      peg$c73 = function(messageBroker, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'messageBroker', messageBroker);
        },
      peg$c74 = function(serviceDiscoveryType, applicationConfigDecl) {
          const choice = serviceDiscoveryType.join('');
          switch (choice) {
          case 'true':
            return addToApplicationDecl(applicationConfigDecl, 'serviceDiscoveryType', true);
            break;
          case 'false':
            return addToApplicationDecl(applicationConfigDecl, 'serviceDiscoveryType', false);
            break;
          default:
            return addToApplicationDecl(applicationConfigDecl, 'serviceDiscoveryType', choice.join(''));
          }
        },
      peg$c75 = function(clientPackageManager, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'clientPackageManager', clientPackageManager.join(''));
        },
      peg$c76 = function(clientFramework, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'clientFramework', clientFramework.join(''));
        },
      peg$c77 = function(nativeLanguage, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'nativeLanguage', nativeLanguage.join(''));
        },
      peg$c78 = function(frontEndBuilder, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'frontEndBuilder', frontEndBuilder.join(''));
        },
      peg$c79 = function(skipUserManagement, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'skipUserManagement', skipUserManagement.join(''));
        },
      peg$c80 = function(skipClient, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'skipClient', skipClient);
        },
      peg$c81 = function(skipServer, applicationConfigDecl) {
          return addToApplicationDecl(applicationConfigDecl, 'skipServer', skipServer);
        },
      peg$c82 = function(applicationConfigDecl) { return applicationConfigDecl; },
      peg$c83 = ",",
      peg$c84 = peg$literalExpectation(",", false),
      peg$c85 = function() { return true; },
      peg$c86 = function() { return false; },
      peg$c87 = "=",
      peg$c88 = peg$literalExpectation("=", false),
      peg$c89 = function(name, value) { return { name: name, value: value }; },
      peg$c90 = function(jd, e, tableName, eb) {
          return { name: e, tableName: tableName ? tableName: e, body: eb, javadoc: jd };
        },
      peg$c91 = function(e, eb) { return { name: e, body: eb, javadoc: '' }; },
      peg$c92 = "(",
      peg$c93 = peg$literalExpectation("(", false),
      peg$c94 = ")",
      peg$c95 = peg$literalExpectation(")", false),
      peg$c96 = function(name) { return name.join(''); },
      peg$c97 = function(fdl) { return fdl; },
      peg$c98 = function() { return []; },
      peg$c99 = function(com, f, t, vl, com2, fdl) {
          return addUniqueElements([{ name: f, type: t, validations: vl, javadoc: com || com2 }], fdl );
        },
      peg$c100 = function(v, vl) { return addUniqueElements([v], vl); },
      peg$c101 = function(rt, bodies) {
              addCardinalityToRelationships(rt, bodies);
              return addUniqueElements([], bodies);
          },
      peg$c102 = function(rb, morerb) { return addUniqueElements([rb], morerb); },
      peg$c103 = function(rb) { return [rb]; },
      peg$c104 = "to",
      peg$c105 = peg$literalExpectation("to", false),
      peg$c106 = function(from, to) {
          return { from: from , to: to };
        },
      peg$c107 = "required",
      peg$c108 = peg$literalExpectation("required", false),
      peg$c109 = function(jd, e, i, required) {
          return { name: e, injectedfield: i, javadoc: jd, required: required ? true : false };
        },
      peg$c110 = function(jd, e) {
          return { name: e, injectedfield: null, javadoc: jd };
        },
      peg$c111 = function(e) { return { name: e, injectedfield: null, javadoc: '' }; },
      peg$c112 = function(e, el) {
          return { name: e, values: el };
        },
      peg$c113 = function(e, el) { return addUniqueElements([e], el); },
      peg$c114 = function(e) { return [e]; },
      peg$c115 = function(sub) { return sub; },
      peg$c116 = function(e, sub) { return addUniqueElements([e], sub); },
      peg$c117 = function(decl, ex) {
          addUniqueElements(parsed.noFluentMethod.list, decl);
          if (ex) {
            addUniqueElements(parsed.noFluentMethod.excluded, ex);
          }
          return parsed.noFluentMethod;
        },
      peg$c118 = function() { return ['*']; },
      peg$c119 = function(decl, ex) {
          parsed.dto[decl[decl.length - 1]] = parsed.dto[decl[decl.length - 1]] || { list: [], excluded: [] };
          addUniqueElements(parsed.dto[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
          	addUniqueElements(parsed.dto[decl[decl.length - 1]].excluded, ex);
          }
          return parsed.dto;
        },
      peg$c120 = function(decl, ex) {
        	parsed.pagination[decl[decl.length - 1]] =
            parsed.pagination[decl[decl.length - 1]] || { list: [], excluded: [] };
          addUniqueElements(parsed.pagination[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
          	addUniqueElements(parsed.pagination[decl[decl.length - 1]].excluded, ex);
          }
          return parsed.pagination;
        },
      peg$c121 = function(decl, ex) {
        	parsed.service[decl[decl.length - 1]] =
            parsed.service[decl[decl.length - 1]] || { list: [], excluded: [] };
          addUniqueElements(parsed.service[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
          	addUniqueElements(parsed.service[decl[decl.length - 1]].excluded, ex);
          }
          return parsed.service;
        },
      peg$c122 = function(decl, ex) {
          parsed.microservice[decl[decl.length - 1]] =
            parsed.microservice[decl[decl.length - 1]] || { list: [], excluded: [] };
          addUniqueElements(parsed.microservice[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
            addUniqueElements(parsed.microservice[decl[decl.length - 1]].excluded, ex);
          }
          return parsed.microservice;
        },
      peg$c123 = function(decl, ex) {
          parsed.searchEngine[decl[decl.length - 1]] =
            parsed.searchEngine[decl[decl.length - 1]] || { list: [], excluded: [] };
          addUniqueElements(parsed.searchEngine[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
            addUniqueElements(parsed.searchEngine[decl[decl.length - 1]].excluded, ex);
          }
          return parsed.searchEngine;
        },
      peg$c124 = function(decl, ex) {
          addUniqueElements(parsed.noClient.list, decl);
          if (ex) {
            addUniqueElements(parsed.noClient.excluded, ex);
          }
          return parsed.noClient;
        },
      peg$c125 = function(decl, ex) {
          addUniqueElements(parsed.noServer.list, decl);
          if (ex) {
            addUniqueElements(parsed.noServer.excluded, ex);
          }
          return parsed.noServer;
        },
      peg$c126 = function(decl, ex) {
          addUniqueElements(parsed.filter.list, decl);
          if (ex) {
            addUniqueElements(parsed.filter.excluded, ex);
          }
          return parsed.filter;
        },
      peg$c127 = function(decl, ex) {
          parsed.angularSuffix[decl[decl.length - 1]] =
            parsed.angularSuffix[decl[decl.length - 1]] || { list: [], excluded: [] };
          addUniqueElements(parsed.angularSuffix[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
            addUniqueElements(parsed.angularSuffix[decl[decl.length - 1]].excluded, ex);
          }
          return parsed.angularSuffix;
        },
      peg$c128 = function(decl, ex) {
          parsed.clientRootFolder[decl[decl.length - 1]] =
            parsed.clientRootFolder[decl[decl.length - 1]] || { list: [], excluded: [] };
          addUniqueElements(parsed.clientRootFolder[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
          if (ex) {
            addUniqueElements(parsed.clientRootFolder[decl[decl.length - 1]].excluded, ex);
          }
          return parsed.clientRootFolder;
        },
      peg$c129 = /^[A-z0-9\-]/,
      peg$c130 = peg$classExpectation([["A", "z"], ["0", "9"], "-"], false, false),
      peg$c131 = function(method) { return ['*', method.toString().replace(/,/g,'')]; },
      peg$c132 = function(e, method) { return [e, method.toString().replace(/,/g,'')]; },
      peg$c133 = function() { return 'one-to-one'; },
      peg$c134 = function() { return 'one-to-many'; },
      peg$c135 = function() { return 'many-to-one'; },
      peg$c136 = function() { return 'many-to-many'; },
      peg$c137 = /^[A-Z]/,
      peg$c138 = peg$classExpectation([["A", "Z"]], false, false),
      peg$c139 = function(head, tail) { return `${head}${tail.join('')}`; },
      peg$c140 = function() { return { key: 'required', value: '' }; },
      peg$c141 = function(int) { return { key: 'minlength', value: int }; },
      peg$c142 = function(constantName) { return { key: 'minlength', value: constantName, constant: true }; },
      peg$c143 = function(int) { return { key: 'maxlength', value: int }; },
      peg$c144 = function(constantName) { return { key: 'maxlength', value: constantName, constant: true }; },
      peg$c145 = function(int) { return { key: 'minbytes', value: int }; },
      peg$c146 = function(constantName) { return { key: 'minbytes', value: constantName, constant: true }; },
      peg$c147 = function(int) { return { key: 'maxbytes', value: int }; },
      peg$c148 = function(constantName) { return { key: 'maxbytes', value: constantName, constant: true }; },
      peg$c149 = function(int) { return { key: 'min', value: int };},
      peg$c150 = function(constantName) { return { key: 'min', value: constantName, constant: true }; },
      peg$c151 = function(int) { return { key: 'max', value: int };},
      peg$c152 = function(constantName) { return { key: 'max', value: constantName, constant: true }; },
      peg$c153 = function(regex) { return { key: 'pattern', value: regex }; },
      peg$c154 = function(notAComment) { return notAComment.join(''); },
      peg$c155 = "/*",
      peg$c156 = peg$literalExpectation("/*", false),
      peg$c157 = /^[*]/,
      peg$c158 = peg$classExpectation(["*"], false, false),
      peg$c159 = "/",
      peg$c160 = peg$literalExpectation("/", false),
      peg$c161 = peg$anyExpectation(),
      peg$c162 = function(char) { return char; },
      peg$c163 = "application",
      peg$c164 = peg$literalExpectation("application", false),
      peg$c165 = "config",
      peg$c166 = peg$literalExpectation("config", false),
      peg$c167 = "path",
      peg$c168 = peg$literalExpectation("path", false),
      peg$c169 = "baseName",
      peg$c170 = peg$literalExpectation("baseName", false),
      peg$c171 = "packageName",
      peg$c172 = peg$literalExpectation("packageName", false),
      peg$c173 = "authenticationType",
      peg$c174 = peg$literalExpectation("authenticationType", false),
      peg$c175 = "hibernateCache",
      peg$c176 = peg$literalExpectation("hibernateCache", false),
      peg$c177 = "clusteredHttpSession",
      peg$c178 = peg$literalExpectation("clusteredHttpSession", false),
      peg$c179 = "websocket",
      peg$c180 = peg$literalExpectation("websocket", false),
      peg$c181 = "databaseType",
      peg$c182 = peg$literalExpectation("databaseType", false),
      peg$c183 = "devDatabaseType",
      peg$c184 = peg$literalExpectation("devDatabaseType", false),
      peg$c185 = "prodDatabaseType",
      peg$c186 = peg$literalExpectation("prodDatabaseType", false),
      peg$c187 = "useCompass",
      peg$c188 = peg$literalExpectation("useCompass", false),
      peg$c189 = "buildTool",
      peg$c190 = peg$literalExpectation("buildTool", false),
      peg$c191 = "searchEngine",
      peg$c192 = peg$literalExpectation("searchEngine", false),
      peg$c193 = "enableTranslation",
      peg$c194 = peg$literalExpectation("enableTranslation", false),
      peg$c195 = "applicationType",
      peg$c196 = peg$literalExpectation("applicationType", false),
      peg$c197 = "testFrameworks",
      peg$c198 = peg$literalExpectation("testFrameworks", false),
      peg$c199 = "languages",
      peg$c200 = peg$literalExpectation("languages", false),
      peg$c201 = "serverPort",
      peg$c202 = peg$literalExpectation("serverPort", false),
      peg$c203 = "enableSocialSignIn",
      peg$c204 = peg$literalExpectation("enableSocialSignIn", false),
      peg$c205 = "useSass",
      peg$c206 = peg$literalExpectation("useSass", false),
      peg$c207 = "jhiPrefix",
      peg$c208 = peg$literalExpectation("jhiPrefix", false),
      peg$c209 = "messageBroker",
      peg$c210 = peg$literalExpectation("messageBroker", false),
      peg$c211 = "serviceDiscoveryType",
      peg$c212 = peg$literalExpectation("serviceDiscoveryType", false),
      peg$c213 = "clientPackageManager",
      peg$c214 = peg$literalExpectation("clientPackageManager", false),
      peg$c215 = "clientFramework",
      peg$c216 = peg$literalExpectation("clientFramework", false),
      peg$c217 = "nativeLanguage",
      peg$c218 = peg$literalExpectation("nativeLanguage", false),
      peg$c219 = "frontendBuilder",
      peg$c220 = peg$literalExpectation("frontendBuilder", false),
      peg$c221 = "skipUserManagement",
      peg$c222 = peg$literalExpectation("skipUserManagement", false),
      peg$c223 = "true",
      peg$c224 = peg$literalExpectation("true", false),
      peg$c225 = "false",
      peg$c226 = peg$literalExpectation("false", false),
      peg$c227 = "entity",
      peg$c228 = peg$literalExpectation("entity", false),
      peg$c229 = "relationship",
      peg$c230 = peg$literalExpectation("relationship", false),
      peg$c231 = "enum",
      peg$c232 = peg$literalExpectation("enum", false),
      peg$c233 = "OneToOne",
      peg$c234 = peg$literalExpectation("OneToOne", false),
      peg$c235 = "OneToMany",
      peg$c236 = peg$literalExpectation("OneToMany", false),
      peg$c237 = "ManyToOne",
      peg$c238 = peg$literalExpectation("ManyToOne", false),
      peg$c239 = "ManyToMany",
      peg$c240 = peg$literalExpectation("ManyToMany", false),
      peg$c241 = "all",
      peg$c242 = peg$literalExpectation("all", false),
      peg$c243 = "*",
      peg$c244 = peg$literalExpectation("*", false),
      peg$c245 = "with",
      peg$c246 = peg$literalExpectation("with", false),
      peg$c247 = "except",
      peg$c248 = peg$literalExpectation("except", false),
      peg$c249 = "noFluentMethod",
      peg$c250 = peg$literalExpectation("noFluentMethod", false),
      peg$c251 = "dto",
      peg$c252 = peg$literalExpectation("dto", false),
      peg$c253 = "paginate",
      peg$c254 = peg$literalExpectation("paginate", false),
      peg$c255 = "service",
      peg$c256 = peg$literalExpectation("service", false),
      peg$c257 = "microservice",
      peg$c258 = peg$literalExpectation("microservice", false),
      peg$c259 = "search",
      peg$c260 = peg$literalExpectation("search", false),
      peg$c261 = "skipClient",
      peg$c262 = peg$literalExpectation("skipClient", false),
      peg$c263 = "skipServer",
      peg$c264 = peg$literalExpectation("skipServer", false),
      peg$c265 = "angularSuffix",
      peg$c266 = peg$literalExpectation("angularSuffix", false),
      peg$c267 = "filter",
      peg$c268 = peg$literalExpectation("filter", false),
      peg$c269 = "clientRootFolder",
      peg$c270 = peg$literalExpectation("clientRootFolder", false),
      peg$c271 = "minlength",
      peg$c272 = peg$literalExpectation("minlength", false),
      peg$c273 = "maxlength",
      peg$c274 = peg$literalExpectation("maxlength", false),
      peg$c275 = "minbytes",
      peg$c276 = peg$literalExpectation("minbytes", false),
      peg$c277 = "maxbytes",
      peg$c278 = peg$literalExpectation("maxbytes", false),
      peg$c279 = "max",
      peg$c280 = peg$literalExpectation("max", false),
      peg$c281 = "min",
      peg$c282 = peg$literalExpectation("min", false),
      peg$c283 = "pattern",
      peg$c284 = peg$literalExpectation("pattern", false),
      peg$c285 = /^[^\n\r\/]/,
      peg$c286 = peg$classExpectation(["\n", "\r", "/"], true, false),
      peg$c287 = function(pattern) { return pattern.join(''); },
      peg$c288 = /^[A-z_]/,
      peg$c289 = peg$classExpectation([["A", "z"], "_"], false, false),
      peg$c290 = /^[A-z0-9_]/,
      peg$c291 = peg$classExpectation([["A", "z"], ["0", "9"], "_"], false, false),
      peg$c292 = function(head, tail) {
          return `${head}${tail.join('')}`;
        },
      peg$c293 = /^[A-Z_]/,
      peg$c294 = peg$classExpectation([["A", "Z"], "_"], false, false),
      peg$c295 = "-",
      peg$c296 = peg$literalExpectation("-", false),
      peg$c297 = function(negative, int) { return parseInt(`${(negative ? negative : '') + int.join('')}`, 10); },
      peg$c298 = /^[a-zA-Z]/,
      peg$c299 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
      peg$c300 = /^[A-z0-9()]/,
      peg$c301 = peg$classExpectation([["A", "z"], ["0", "9"], "(", ")"], false, false),
      peg$c302 = /^['\n'|'\t'|'\r'|' '|\u2028|\u2029]/,
      peg$c303 = peg$classExpectation(["'", "\n", "'", "|", "'", "\t", "'", "|", "'", "\r", "'", "|", "'", " ", "'", "|", "\u2028", "|", "\u2029"], false, false),
      peg$c304 = /^['\t'|' '|\u2028|\u2029]/,
      peg$c305 = peg$classExpectation(["'", "\t", "'", "|", "'", " ", "'", "|", "\u2028", "|", "\u2029"], false, false),
      peg$c306 = /^[\/]/,
      peg$c307 = peg$classExpectation(["/"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseprog();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseprog() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSPACE();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseSPACE();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseconstantDecl();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseSPACE();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSPACE();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseprog();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSPACE();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSPACE();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseapplicationDecl();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseSPACE();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseSPACE();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseprog();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c2(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseSPACE();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseSPACE();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseentityDecl();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseSPACE();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseSPACE();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseprog();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c3(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseSPACE();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseSPACE();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parserelationDecl();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseSPACE();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseSPACE();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseprog();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c4(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseSPACE();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseSPACE();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseenumDecl();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseSPACE();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseSPACE();
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseprog();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c5(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseSPACE();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseSPACE();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsedtoDecl();
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parseSPACE();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseSPACE();
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseprog();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c6(s2, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseSPACE();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parseSPACE();
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsepagiDecl();
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseSPACE();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parseSPACE();
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseprog();
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c7(s2, s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parseSPACE();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseSPACE();
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseserviceDecl();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parseSPACE();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parseSPACE();
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseprog();
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c8(s2, s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    s2 = peg$parseSPACE();
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$parseSPACE();
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsecomment();
                      if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parseSPACE();
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parseSPACE();
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseprog();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c9(s4);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = [];
                      s2 = peg$parseSPACE();
                      while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parseSPACE();
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsemicroserviceDecl1();
                        if (s2 !== peg$FAILED) {
                          s3 = [];
                          s4 = peg$parseSPACE();
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parseSPACE();
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseprog();
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c10(s2, s4);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = [];
                        s2 = peg$parseSPACE();
                        while (s2 !== peg$FAILED) {
                          s1.push(s2);
                          s2 = peg$parseSPACE();
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsesearchEngineDecl();
                          if (s2 !== peg$FAILED) {
                            s3 = [];
                            s4 = peg$parseSPACE();
                            while (s4 !== peg$FAILED) {
                              s3.push(s4);
                              s4 = peg$parseSPACE();
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseprog();
                              if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c11(s2, s4);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = [];
                          s2 = peg$parseSPACE();
                          while (s2 !== peg$FAILED) {
                            s1.push(s2);
                            s2 = peg$parseSPACE();
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsenoClientDecl();
                            if (s2 !== peg$FAILED) {
                              s3 = [];
                              s4 = peg$parseSPACE();
                              while (s4 !== peg$FAILED) {
                                s3.push(s4);
                                s4 = peg$parseSPACE();
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseprog();
                                if (s4 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c12(s2, s4);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = [];
                            s2 = peg$parseSPACE();
                            while (s2 !== peg$FAILED) {
                              s1.push(s2);
                              s2 = peg$parseSPACE();
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsenoServerDecl();
                              if (s2 !== peg$FAILED) {
                                s3 = [];
                                s4 = peg$parseSPACE();
                                while (s4 !== peg$FAILED) {
                                  s3.push(s4);
                                  s4 = peg$parseSPACE();
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseprog();
                                  if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c13(s2, s4);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = [];
                              s2 = peg$parseSPACE();
                              while (s2 !== peg$FAILED) {
                                s1.push(s2);
                                s2 = peg$parseSPACE();
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseangularSuffixDecl();
                                if (s2 !== peg$FAILED) {
                                  s3 = [];
                                  s4 = peg$parseSPACE();
                                  while (s4 !== peg$FAILED) {
                                    s3.push(s4);
                                    s4 = peg$parseSPACE();
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseprog();
                                    if (s4 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c14(s2, s4);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = [];
                                s2 = peg$parseSPACE();
                                while (s2 !== peg$FAILED) {
                                  s1.push(s2);
                                  s2 = peg$parseSPACE();
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parsenoFluentMethod();
                                  if (s2 !== peg$FAILED) {
                                    s3 = [];
                                    s4 = peg$parseSPACE();
                                    while (s4 !== peg$FAILED) {
                                      s3.push(s4);
                                      s4 = peg$parseSPACE();
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parseprog();
                                      if (s4 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c15(s2, s4);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = [];
                                  s2 = peg$parseSPACE();
                                  while (s2 !== peg$FAILED) {
                                    s1.push(s2);
                                    s2 = peg$parseSPACE();
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parsefilterDecl();
                                    if (s2 !== peg$FAILED) {
                                      s3 = [];
                                      s4 = peg$parseSPACE();
                                      while (s4 !== peg$FAILED) {
                                        s3.push(s4);
                                        s4 = peg$parseSPACE();
                                      }
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parseprog();
                                        if (s4 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c16(s2, s4);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = [];
                                    s2 = peg$parseSPACE();
                                    while (s2 !== peg$FAILED) {
                                      s1.push(s2);
                                      s2 = peg$parseSPACE();
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseclientRootFolderDecl();
                                      if (s2 !== peg$FAILED) {
                                        s3 = [];
                                        s4 = peg$parseSPACE();
                                        while (s4 !== peg$FAILED) {
                                          s3.push(s4);
                                          s4 = peg$parseSPACE();
                                        }
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parseprog();
                                          if (s4 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c17(s2, s4);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$c18;
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c19();
                                      }
                                      s0 = s1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseapplicationDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAPPLICATION();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseapplicationSubDecl();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c22;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c23); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c24(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseapplicationSubDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSPACE();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseSPACE();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCONFIG();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseSPACE();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSPACE();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s4 = peg$c20;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseSPACE();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseSPACE();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseapplicationConfigDecl();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseSPACE();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseSPACE();
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c22;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c23); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parseSPACE();
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseSPACE();
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseapplicationSubDecl();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c25(s6, s10);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSPACE();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSPACE();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c26) {
          s2 = peg$c26;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseSPACE();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseSPACE();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesimpleEntityList();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseSPACE();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseSPACE();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexclusion();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseSPACE();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseSPACE();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseapplicationSubDecl();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c28(s4, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$c18;
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c29();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseapplicationConfigDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseBASE_NAME();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c30.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c30.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseapplicationConfigDecl();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c32(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePATH();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSPACE();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c33;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c35.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c35.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s5 = peg$c33;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseSPACE();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseSPACE();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseapplicationConfigDecl();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c37(s4, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePACKAGE_NAME();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSPACE();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSPACE();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$currPos;
            s6 = [];
            if (peg$c38.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$c38.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c39); }
                }
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s7 = peg$c40;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = [];
              if (peg$c38.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c39); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c38.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                  }
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s7 = peg$c40;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              if (peg$c38.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c39); }
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$c38.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                  }
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseSPACE();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseSPACE();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseapplicationConfigDecl();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c42(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseAUTHENTICATION_TYPE();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseSPACE();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseSPACE();
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$c30.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  if (peg$c30.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                  }
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseSPACE();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseSPACE();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseapplicationConfigDecl();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c43(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseHIBERNATE_CACHE();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseSPACE();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseSPACE();
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                if (peg$c30.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s4 !== peg$FAILED) {
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (peg$c30.test(input.charAt(peg$currPos))) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c31); }
                    }
                  }
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseSPACE();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseSPACE();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseapplicationConfigDecl();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c44(s3, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCLUSTERED_HTTP_SESSION();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseSPACE();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseSPACE();
                }
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  if (peg$c30.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                  }
                  if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      if (peg$c30.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c31); }
                      }
                    }
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parseSPACE();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parseSPACE();
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseapplicationConfigDecl();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c45(s3, s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseWEBSOCKET();
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parseSPACE();
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseSPACE();
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (peg$c30.test(input.charAt(peg$currPos))) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c31); }
                    }
                    if (s4 !== peg$FAILED) {
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        if (peg$c30.test(input.charAt(peg$currPos))) {
                          s4 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c31); }
                        }
                      }
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$parseSPACE();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parseSPACE();
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseapplicationConfigDecl();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c46(s3, s5);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseDATABASE_TYPE();
                  if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseSPACE();
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parseSPACE();
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      if (peg$c38.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c39); }
                      }
                      if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          if (peg$c38.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                          }
                        }
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseSPACE();
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          s5 = peg$parseSPACE();
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseapplicationConfigDecl();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c47(s3, s5);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseDEV_DATABASE_TYPE();
                    if (s1 !== peg$FAILED) {
                      s2 = [];
                      s3 = peg$parseSPACE();
                      while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseSPACE();
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = [];
                        if (peg$c48.test(input.charAt(peg$currPos))) {
                          s4 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c49); }
                        }
                        if (s4 !== peg$FAILED) {
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            if (peg$c48.test(input.charAt(peg$currPos))) {
                              s4 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c49); }
                            }
                          }
                        } else {
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = [];
                          s5 = peg$parseSPACE();
                          while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$parseSPACE();
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseapplicationConfigDecl();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c50(s3, s5);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsePROD_DATABASE_TYPE();
                      if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$parseSPACE();
                        while (s3 !== peg$FAILED) {
                          s2.push(s3);
                          s3 = peg$parseSPACE();
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = [];
                          if (peg$c48.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c49); }
                          }
                          if (s4 !== peg$FAILED) {
                            while (s4 !== peg$FAILED) {
                              s3.push(s4);
                              if (peg$c48.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c49); }
                              }
                            }
                          } else {
                            s3 = peg$FAILED;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parseSPACE();
                            while (s5 !== peg$FAILED) {
                              s4.push(s5);
                              s5 = peg$parseSPACE();
                            }
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseapplicationConfigDecl();
                              if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c51(s3, s5);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseUSE_COMPASS();
                        if (s1 !== peg$FAILED) {
                          s2 = [];
                          s3 = peg$parseSPACE();
                          while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$parseSPACE();
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parsebooleanChoice();
                            if (s3 !== peg$FAILED) {
                              s4 = [];
                              s5 = peg$parseSPACE();
                              while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parseSPACE();
                              }
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseapplicationConfigDecl();
                                if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c52(s3, s5);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseBUILD_TOOL();
                          if (s1 !== peg$FAILED) {
                            s2 = [];
                            s3 = peg$parseSPACE();
                            while (s3 !== peg$FAILED) {
                              s2.push(s3);
                              s3 = peg$parseSPACE();
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = [];
                              if (peg$c30.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c31); }
                              }
                              if (s4 !== peg$FAILED) {
                                while (s4 !== peg$FAILED) {
                                  s3.push(s4);
                                  if (peg$c30.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                  }
                                }
                              } else {
                                s3 = peg$FAILED;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = [];
                                s5 = peg$parseSPACE();
                                while (s5 !== peg$FAILED) {
                                  s4.push(s5);
                                  s5 = peg$parseSPACE();
                                }
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseapplicationConfigDecl();
                                  if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c53(s3, s5);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseSEARCH_ENGINE();
                            if (s1 !== peg$FAILED) {
                              s2 = [];
                              s3 = peg$parseSPACE();
                              while (s3 !== peg$FAILED) {
                                s2.push(s3);
                                s3 = peg$parseSPACE();
                              }
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsebooleanChoice();
                                if (s3 !== peg$FAILED) {
                                  s4 = [];
                                  s5 = peg$parseSPACE();
                                  while (s5 !== peg$FAILED) {
                                    s4.push(s5);
                                    s5 = peg$parseSPACE();
                                  }
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseapplicationConfigDecl();
                                    if (s5 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c54(s3, s5);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseENABLE_TRANSLATION();
                              if (s1 !== peg$FAILED) {
                                s2 = [];
                                s3 = peg$parseSPACE();
                                while (s3 !== peg$FAILED) {
                                  s2.push(s3);
                                  s3 = peg$parseSPACE();
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parsebooleanChoice();
                                  if (s3 !== peg$FAILED) {
                                    s4 = [];
                                    s5 = peg$parseSPACE();
                                    while (s5 !== peg$FAILED) {
                                      s4.push(s5);
                                      s5 = peg$parseSPACE();
                                    }
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parseapplicationConfigDecl();
                                      if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c55(s3, s5);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseAPPLICATION_TYPE();
                                if (s1 !== peg$FAILED) {
                                  s2 = [];
                                  s3 = peg$parseSPACE();
                                  while (s3 !== peg$FAILED) {
                                    s2.push(s3);
                                    s3 = peg$parseSPACE();
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = [];
                                    if (peg$c38.test(input.charAt(peg$currPos))) {
                                      s4 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s4 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                    }
                                    if (s4 !== peg$FAILED) {
                                      while (s4 !== peg$FAILED) {
                                        s3.push(s4);
                                        if (peg$c38.test(input.charAt(peg$currPos))) {
                                          s4 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                        }
                                      }
                                    } else {
                                      s3 = peg$FAILED;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s4 = [];
                                      s5 = peg$parseSPACE();
                                      while (s5 !== peg$FAILED) {
                                        s4.push(s5);
                                        s5 = peg$parseSPACE();
                                      }
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parseapplicationConfigDecl();
                                        if (s5 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c56(s3, s5);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseTEST_FRAMEWORK();
                                  if (s1 !== peg$FAILED) {
                                    s2 = [];
                                    s3 = peg$parseSPACE();
                                    while (s3 !== peg$FAILED) {
                                      s2.push(s3);
                                      s3 = peg$parseSPACE();
                                    }
                                    if (s2 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 91) {
                                        s3 = peg$c57;
                                        peg$currPos++;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        s4 = [];
                                        if (peg$c59.test(input.charAt(peg$currPos))) {
                                          s5 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s5 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                        }
                                        if (s5 !== peg$FAILED) {
                                          while (s5 !== peg$FAILED) {
                                            s4.push(s5);
                                            if (peg$c59.test(input.charAt(peg$currPos))) {
                                              s5 = input.charAt(peg$currPos);
                                              peg$currPos++;
                                            } else {
                                              s5 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                            }
                                          }
                                        } else {
                                          s4 = peg$FAILED;
                                        }
                                        if (s4 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 93) {
                                            s5 = peg$c61;
                                            peg$currPos++;
                                          } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c62); }
                                          }
                                          if (s5 !== peg$FAILED) {
                                            s6 = [];
                                            s7 = peg$parseSPACE();
                                            while (s7 !== peg$FAILED) {
                                              s6.push(s7);
                                              s7 = peg$parseSPACE();
                                            }
                                            if (s6 !== peg$FAILED) {
                                              s7 = peg$parseapplicationConfigDecl();
                                              if (s7 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c63(s4, s7);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseLANGUAGES();
                                    if (s1 !== peg$FAILED) {
                                      s2 = [];
                                      s3 = peg$parseSPACE();
                                      while (s3 !== peg$FAILED) {
                                        s2.push(s3);
                                        s3 = peg$parseSPACE();
                                      }
                                      if (s2 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 91) {
                                          s3 = peg$c57;
                                          peg$currPos++;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                        }
                                        if (s3 !== peg$FAILED) {
                                          s4 = [];
                                          if (peg$c59.test(input.charAt(peg$currPos))) {
                                            s5 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                          }
                                          if (s5 !== peg$FAILED) {
                                            while (s5 !== peg$FAILED) {
                                              s4.push(s5);
                                              if (peg$c59.test(input.charAt(peg$currPos))) {
                                                s5 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                              } else {
                                                s5 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                              }
                                            }
                                          } else {
                                            s4 = peg$FAILED;
                                          }
                                          if (s4 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 93) {
                                              s5 = peg$c61;
                                              peg$currPos++;
                                            } else {
                                              s5 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c62); }
                                            }
                                            if (s5 !== peg$FAILED) {
                                              s6 = [];
                                              s7 = peg$parseSPACE();
                                              while (s7 !== peg$FAILED) {
                                                s6.push(s7);
                                                s7 = peg$parseSPACE();
                                              }
                                              if (s6 !== peg$FAILED) {
                                                s7 = peg$parseapplicationConfigDecl();
                                                if (s7 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c64(s4, s7);
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseSERVER_PORT();
                                      if (s1 !== peg$FAILED) {
                                        s2 = [];
                                        s3 = peg$parseSPACE();
                                        while (s3 !== peg$FAILED) {
                                          s2.push(s3);
                                          s3 = peg$parseSPACE();
                                        }
                                        if (s2 !== peg$FAILED) {
                                          s3 = [];
                                          if (peg$c65.test(input.charAt(peg$currPos))) {
                                            s4 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                          }
                                          if (s4 !== peg$FAILED) {
                                            while (s4 !== peg$FAILED) {
                                              s3.push(s4);
                                              if (peg$c65.test(input.charAt(peg$currPos))) {
                                                s4 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                              } else {
                                                s4 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                              }
                                            }
                                          } else {
                                            s3 = peg$FAILED;
                                          }
                                          if (s3 !== peg$FAILED) {
                                            s4 = [];
                                            s5 = peg$parseSPACE();
                                            while (s5 !== peg$FAILED) {
                                              s4.push(s5);
                                              s5 = peg$parseSPACE();
                                            }
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parseapplicationConfigDecl();
                                              if (s5 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c67(s3, s5);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseENABLE_SOCIAL_SIGN_IN();
                                        if (s1 !== peg$FAILED) {
                                          s2 = [];
                                          s3 = peg$parseSPACE();
                                          while (s3 !== peg$FAILED) {
                                            s2.push(s3);
                                            s3 = peg$parseSPACE();
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parsebooleanChoice();
                                            if (s3 !== peg$FAILED) {
                                              s4 = [];
                                              s5 = peg$parseSPACE();
                                              while (s5 !== peg$FAILED) {
                                                s4.push(s5);
                                                s5 = peg$parseSPACE();
                                              }
                                              if (s4 !== peg$FAILED) {
                                                s5 = peg$parseapplicationConfigDecl();
                                                if (s5 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c68(s3, s5);
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseUSE_SASS();
                                          if (s1 !== peg$FAILED) {
                                            s2 = [];
                                            s3 = peg$parseSPACE();
                                            while (s3 !== peg$FAILED) {
                                              s2.push(s3);
                                              s3 = peg$parseSPACE();
                                            }
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parsebooleanChoice();
                                              if (s3 !== peg$FAILED) {
                                                s4 = [];
                                                s5 = peg$parseSPACE();
                                                while (s5 !== peg$FAILED) {
                                                  s4.push(s5);
                                                  s5 = peg$parseSPACE();
                                                }
                                                if (s4 !== peg$FAILED) {
                                                  s5 = peg$parseapplicationConfigDecl();
                                                  if (s5 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c69(s3, s5);
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseJHI_PREFIX();
                                            if (s1 !== peg$FAILED) {
                                              s2 = [];
                                              s3 = peg$parseSPACE();
                                              while (s3 !== peg$FAILED) {
                                                s2.push(s3);
                                                s3 = peg$parseSPACE();
                                              }
                                              if (s2 !== peg$FAILED) {
                                                s3 = [];
                                                if (peg$c70.test(input.charAt(peg$currPos))) {
                                                  s4 = input.charAt(peg$currPos);
                                                  peg$currPos++;
                                                } else {
                                                  s4 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c71); }
                                                }
                                                if (s4 !== peg$FAILED) {
                                                  while (s4 !== peg$FAILED) {
                                                    s3.push(s4);
                                                    if (peg$c70.test(input.charAt(peg$currPos))) {
                                                      s4 = input.charAt(peg$currPos);
                                                      peg$currPos++;
                                                    } else {
                                                      s4 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c71); }
                                                    }
                                                  }
                                                } else {
                                                  s3 = peg$FAILED;
                                                }
                                                if (s3 !== peg$FAILED) {
                                                  s4 = [];
                                                  s5 = peg$parseSPACE();
                                                  while (s5 !== peg$FAILED) {
                                                    s4.push(s5);
                                                    s5 = peg$parseSPACE();
                                                  }
                                                  if (s4 !== peg$FAILED) {
                                                    s5 = peg$parseapplicationConfigDecl();
                                                    if (s5 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$c72(s3, s5);
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseMESSAGE_BROKER();
                                              if (s1 !== peg$FAILED) {
                                                s2 = [];
                                                s3 = peg$parseSPACE();
                                                while (s3 !== peg$FAILED) {
                                                  s2.push(s3);
                                                  s3 = peg$parseSPACE();
                                                }
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parsebooleanChoice();
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = [];
                                                    s5 = peg$parseSPACE();
                                                    while (s5 !== peg$FAILED) {
                                                      s4.push(s5);
                                                      s5 = peg$parseSPACE();
                                                    }
                                                    if (s4 !== peg$FAILED) {
                                                      s5 = peg$parseapplicationConfigDecl();
                                                      if (s5 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c73(s3, s5);
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseSERVICE_DISCOVERY_TYPE();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = [];
                                                  s3 = peg$parseSPACE();
                                                  while (s3 !== peg$FAILED) {
                                                    s2.push(s3);
                                                    s3 = peg$parseSPACE();
                                                  }
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = [];
                                                    if (peg$c30.test(input.charAt(peg$currPos))) {
                                                      s4 = input.charAt(peg$currPos);
                                                      peg$currPos++;
                                                    } else {
                                                      s4 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                                    }
                                                    if (s4 !== peg$FAILED) {
                                                      while (s4 !== peg$FAILED) {
                                                        s3.push(s4);
                                                        if (peg$c30.test(input.charAt(peg$currPos))) {
                                                          s4 = input.charAt(peg$currPos);
                                                          peg$currPos++;
                                                        } else {
                                                          s4 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                                        }
                                                      }
                                                    } else {
                                                      s3 = peg$FAILED;
                                                    }
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = [];
                                                      s5 = peg$parseSPACE();
                                                      while (s5 !== peg$FAILED) {
                                                        s4.push(s5);
                                                        s5 = peg$parseSPACE();
                                                      }
                                                      if (s4 !== peg$FAILED) {
                                                        s5 = peg$parseapplicationConfigDecl();
                                                        if (s5 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s1 = peg$c74(s3, s5);
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseCLIENT_PACKAGE_MANAGER();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = [];
                                                    s3 = peg$parseSPACE();
                                                    while (s3 !== peg$FAILED) {
                                                      s2.push(s3);
                                                      s3 = peg$parseSPACE();
                                                    }
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = [];
                                                      if (peg$c30.test(input.charAt(peg$currPos))) {
                                                        s4 = input.charAt(peg$currPos);
                                                        peg$currPos++;
                                                      } else {
                                                        s4 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                                      }
                                                      if (s4 !== peg$FAILED) {
                                                        while (s4 !== peg$FAILED) {
                                                          s3.push(s4);
                                                          if (peg$c30.test(input.charAt(peg$currPos))) {
                                                            s4 = input.charAt(peg$currPos);
                                                            peg$currPos++;
                                                          } else {
                                                            s4 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                                          }
                                                        }
                                                      } else {
                                                        s3 = peg$FAILED;
                                                      }
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = [];
                                                        s5 = peg$parseSPACE();
                                                        while (s5 !== peg$FAILED) {
                                                          s4.push(s5);
                                                          s5 = peg$parseSPACE();
                                                        }
                                                        if (s4 !== peg$FAILED) {
                                                          s5 = peg$parseapplicationConfigDecl();
                                                          if (s5 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c75(s3, s5);
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseCLIENT_FRAMEWORK();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = [];
                                                      s3 = peg$parseSPACE();
                                                      while (s3 !== peg$FAILED) {
                                                        s2.push(s3);
                                                        s3 = peg$parseSPACE();
                                                      }
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = [];
                                                        if (peg$c48.test(input.charAt(peg$currPos))) {
                                                          s4 = input.charAt(peg$currPos);
                                                          peg$currPos++;
                                                        } else {
                                                          s4 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                                        }
                                                        if (s4 !== peg$FAILED) {
                                                          while (s4 !== peg$FAILED) {
                                                            s3.push(s4);
                                                            if (peg$c48.test(input.charAt(peg$currPos))) {
                                                              s4 = input.charAt(peg$currPos);
                                                              peg$currPos++;
                                                            } else {
                                                              s4 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                                            }
                                                          }
                                                        } else {
                                                          s3 = peg$FAILED;
                                                        }
                                                        if (s3 !== peg$FAILED) {
                                                          s4 = [];
                                                          s5 = peg$parseSPACE();
                                                          while (s5 !== peg$FAILED) {
                                                            s4.push(s5);
                                                            s5 = peg$parseSPACE();
                                                          }
                                                          if (s4 !== peg$FAILED) {
                                                            s5 = peg$parseapplicationConfigDecl();
                                                            if (s5 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$c76(s3, s5);
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseNATIVE_LANGUAGE();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = [];
                                                        s3 = peg$parseSPACE();
                                                        while (s3 !== peg$FAILED) {
                                                          s2.push(s3);
                                                          s3 = peg$parseSPACE();
                                                        }
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = [];
                                                          if (peg$c38.test(input.charAt(peg$currPos))) {
                                                            s4 = input.charAt(peg$currPos);
                                                            peg$currPos++;
                                                          } else {
                                                            s4 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                          }
                                                          if (s4 !== peg$FAILED) {
                                                            while (s4 !== peg$FAILED) {
                                                              s3.push(s4);
                                                              if (peg$c38.test(input.charAt(peg$currPos))) {
                                                                s4 = input.charAt(peg$currPos);
                                                                peg$currPos++;
                                                              } else {
                                                                s4 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                              }
                                                            }
                                                          } else {
                                                            s3 = peg$FAILED;
                                                          }
                                                          if (s3 !== peg$FAILED) {
                                                            s4 = peg$parseapplicationConfigDecl();
                                                            if (s4 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$c77(s3, s4);
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseFRONT_END_BUILDER();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = [];
                                                          s3 = peg$parseSPACE();
                                                          while (s3 !== peg$FAILED) {
                                                            s2.push(s3);
                                                            s3 = peg$parseSPACE();
                                                          }
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = [];
                                                            if (peg$c30.test(input.charAt(peg$currPos))) {
                                                              s4 = input.charAt(peg$currPos);
                                                              peg$currPos++;
                                                            } else {
                                                              s4 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                                            }
                                                            if (s4 !== peg$FAILED) {
                                                              while (s4 !== peg$FAILED) {
                                                                s3.push(s4);
                                                                if (peg$c30.test(input.charAt(peg$currPos))) {
                                                                  s4 = input.charAt(peg$currPos);
                                                                  peg$currPos++;
                                                                } else {
                                                                  s4 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                                                }
                                                              }
                                                            } else {
                                                              s3 = peg$FAILED;
                                                            }
                                                            if (s3 !== peg$FAILED) {
                                                              s4 = peg$parseapplicationConfigDecl();
                                                              if (s4 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$c78(s3, s4);
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseSKIP_USER_MANAGEMENT();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = [];
                                                            s3 = peg$parseSPACE();
                                                            while (s3 !== peg$FAILED) {
                                                              s2.push(s3);
                                                              s3 = peg$parseSPACE();
                                                            }
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parsebooleanChoice();
                                                              if (s3 !== peg$FAILED) {
                                                                s4 = [];
                                                                s5 = peg$parseSPACE();
                                                                while (s5 !== peg$FAILED) {
                                                                  s4.push(s5);
                                                                  s5 = peg$parseSPACE();
                                                                }
                                                                if (s4 !== peg$FAILED) {
                                                                  s5 = peg$parseapplicationConfigDecl();
                                                                  if (s5 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c79(s3, s5);
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseSKIP_CLIENT();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = [];
                                                              s3 = peg$parseSPACE();
                                                              while (s3 !== peg$FAILED) {
                                                                s2.push(s3);
                                                                s3 = peg$parseSPACE();
                                                              }
                                                              if (s2 !== peg$FAILED) {
                                                                s3 = peg$parsebooleanChoice();
                                                                if (s3 !== peg$FAILED) {
                                                                  s4 = [];
                                                                  s5 = peg$parseSPACE();
                                                                  while (s5 !== peg$FAILED) {
                                                                    s4.push(s5);
                                                                    s5 = peg$parseSPACE();
                                                                  }
                                                                  if (s4 !== peg$FAILED) {
                                                                    s5 = peg$parseapplicationConfigDecl();
                                                                    if (s5 !== peg$FAILED) {
                                                                      peg$savedPos = s0;
                                                                      s1 = peg$c80(s3, s5);
                                                                      s0 = s1;
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseSKIP_SERVER();
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = [];
                                                                s3 = peg$parseSPACE();
                                                                while (s3 !== peg$FAILED) {
                                                                  s2.push(s3);
                                                                  s3 = peg$parseSPACE();
                                                                }
                                                                if (s2 !== peg$FAILED) {
                                                                  s3 = peg$parsebooleanChoice();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s4 = [];
                                                                    s5 = peg$parseSPACE();
                                                                    while (s5 !== peg$FAILED) {
                                                                      s4.push(s5);
                                                                      s5 = peg$parseSPACE();
                                                                    }
                                                                    if (s4 !== peg$FAILED) {
                                                                      s5 = peg$parseapplicationConfigDecl();
                                                                      if (s5 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c81(s3, s5);
                                                                        s0 = s1;
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parsecomment();
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = [];
                                                                  s3 = peg$parseSPACE();
                                                                  while (s3 !== peg$FAILED) {
                                                                    s2.push(s3);
                                                                    s3 = peg$parseSPACE();
                                                                  }
                                                                  if (s2 !== peg$FAILED) {
                                                                    s3 = peg$parseapplicationConfigDecl();
                                                                    if (s3 !== peg$FAILED) {
                                                                      peg$savedPos = s0;
                                                                      s1 = peg$c82(s3);
                                                                      s0 = s1;
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  if (input.charCodeAt(peg$currPos) === 44) {
                                                                    s1 = peg$c83;
                                                                    peg$currPos++;
                                                                  } else {
                                                                    s1 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c84); }
                                                                  }
                                                                  if (s1 !== peg$FAILED) {
                                                                    s2 = [];
                                                                    s3 = peg$parseSPACE();
                                                                    while (s3 !== peg$FAILED) {
                                                                      s2.push(s3);
                                                                      s3 = peg$parseSPACE();
                                                                    }
                                                                    if (s2 !== peg$FAILED) {
                                                                      s3 = peg$parseapplicationConfigDecl();
                                                                      if (s3 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c82(s3);
                                                                        s0 = s1;
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$c18;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebooleanChoice() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTRUE();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c85();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFALSE();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c86();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseconstantDecl() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCONSTANT_NAME();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c87;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseINTEGER();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c89(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseentityDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parsecomment();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseENTITY();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseENTITY_NAME();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseentityTableNameDecl();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseSPACE();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseSPACE();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseentityBody();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parseSPACE();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parseSPACE();
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c90(s1, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseENTITY();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSPACE();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseENTITY_NAME();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseSPACE();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseSPACE();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseentityBody();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c91(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseentityTableNameDecl() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c92;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c93); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c70.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c70.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c94;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c95); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c96(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseentityBody() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c20;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefieldDeclList();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c22;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c97(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$c18;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c98();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsefieldDeclList() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSPACE();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseSPACE();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomment();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseSPACE();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSPACE();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFIELD_NAME();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseSPACE_WITHOUT_NEWLINE();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseSPACE_WITHOUT_NEWLINE();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetype();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseSPACE_WITHOUT_NEWLINE();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseSPACE_WITHOUT_NEWLINE();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsevalidationList();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parseSPACE_WITHOUT_NEWLINE();
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseSPACE_WITHOUT_NEWLINE();
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsecomment();
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parseSPACE_WITHOUT_NEWLINE();
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parseSPACE_WITHOUT_NEWLINE();
                        }
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s12 = peg$c83;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c84); }
                          }
                          if (s12 === peg$FAILED) {
                            s12 = null;
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = [];
                            s14 = peg$parseSPACE();
                            while (s14 !== peg$FAILED) {
                              s13.push(s14);
                              s14 = peg$parseSPACE();
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parsefieldDeclList();
                              if (s14 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c99(s2, s4, s6, s8, s10, s14);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$c18;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c98();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsevalidationList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsevalidation();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE_WITHOUT_NEWLINE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE_WITHOUT_NEWLINE();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevalidationList();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c100(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$c18;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c98();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parserelationDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseRELATIONSHIP();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSPACE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserelationshipType();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c20;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parserelationshipBodies();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseSPACE();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseSPACE();
                  }
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s9 = peg$c22;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c23); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c101(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserelationshipBodies() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parserelationshipBody();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserelationshipBodies();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c102(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parserelationshipBody();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c103(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parserelationshipBody() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parserelationshipSide();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c104) {
          s3 = peg$c104;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c105); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserelationshipSide();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c106(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserelationshipSide() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parsecomment();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseENTITY_NAME();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c20;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseINJECTED_FIELD_NAME();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseSPACE();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseSPACE();
                  }
                  if (s8 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c107) {
                      s9 = peg$c107;
                      peg$currPos += 8;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c108); }
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s10 = peg$c22;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c23); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parseSPACE();
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parseSPACE();
                        }
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c109(s1, s3, s7, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecomment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSPACE();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseENTITY_NAME();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseSPACE();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseSPACE();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 123) {
                s6 = peg$c20;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c21); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseSPACE();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseSPACE();
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c22;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c23); }
                  }
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseSPACE();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseSPACE();
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c110(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseENTITY_NAME();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSPACE();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c111(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseenumDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseENUM();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSPACE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseENUMNAME();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c20;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseenumPropList();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseSPACE();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseSPACE();
                  }
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s9 = peg$c22;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c23); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c112(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseenumPropList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseENUMPROP();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseenumPropList();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c113(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseENUMPROP();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c114(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexclusion() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseEXCEPT();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexclusionSub();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c115(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexclusionSub() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseENTITY_NAME();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusionSub();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseENTITY_NAME();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c114(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenoFluentMethod() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseNO_FLUENT_METHOD();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesubNoFluentMethod();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c117(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubNoFluentMethod() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseENTITY_NAME();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesubNoFluentMethod();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTAR();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c118();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseALL();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c118();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseENTITY_NAME();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c114(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsedtoDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseDTO();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityList();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c119(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepagiDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePAGINATE();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityList();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c120(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseserviceDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSERVICE();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityList();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c121(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemicroserviceDecl1() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseMICROSERVICE();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityList();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c122(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesearchEngineDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSEARCH();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityList();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c123(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenoClientDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSKIP_CLIENT();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesubNoClientDecl();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c124(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubNoClientDecl() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseENTITY_NAME();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesubNoClientDecl();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTAR();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c118();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseALL();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c118();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseENTITY_NAME();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c114(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsenoServerDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSKIP_SERVER();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesubNoServerDecl();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c125(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubNoServerDecl() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseENTITY_NAME();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesubNoServerDecl();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTAR();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c118();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseALL();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c118();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseENTITY_NAME();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c114(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsefilterDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseFILTER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSPACE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesubFilterDecl();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c126(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubFilterDecl() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseENTITY_NAME();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesubFilterDecl();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTAR();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c118();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseALL();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c118();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseENTITY_NAME();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c114(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseangularSuffixDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseANGULAR_SUFFIX();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityList();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c127(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseclientRootFolderDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseCLIENT_ROOT_FOLDER();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityList();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexclusion();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSPACE();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c128(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseentityList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseENTITY_NAME();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseentityList();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTAR();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSPACE();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseWITH();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseSPACE();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseSPACE();
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              if (peg$c129.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c130); }
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$c129.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c130); }
                  }
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c131(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseALL();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSPACE();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSPACE();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseWITH();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseSPACE();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseSPACE();
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (peg$c129.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c130); }
                }
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c129.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c130); }
                    }
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c131(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseENTITY_NAME();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseSPACE();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseSPACE();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseWITH();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseSPACE();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseSPACE();
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c129.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c130); }
                  }
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      if (peg$c129.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c130); }
                      }
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c132(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesimpleEntityList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseENTITY_NAME();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSPACE();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSPACE();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSPACE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesimpleEntityList();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTAR();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSPACE();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c118();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseALL();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSPACE();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSPACE();
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c118();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseENTITY_NAME();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseSPACE();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseSPACE();
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c114(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parserelationshipType() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseONE_TO_ONE();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c133();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseONE_TO_MANY();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c134();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMANY_TO_ONE();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c135();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMANY_TO_MANY();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c136();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsetype() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c137.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c48.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c48.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c139(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalidation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseREQUIRED();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c140();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMINLENGTH();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSPACE();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSPACE();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c92;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseSPACE();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseSPACE();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseINTEGER();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseSPACE();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseSPACE();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c94;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c141(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMINLENGTH();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSPACE();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSPACE();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c92;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c93); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseSPACE();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseSPACE();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCONSTANT_NAME();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseSPACE();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseSPACE();
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s7 = peg$c94;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c95); }
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c142(s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMAXLENGTH();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseSPACE();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseSPACE();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s3 = peg$c92;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c93); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseSPACE();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseSPACE();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseINTEGER();
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parseSPACE();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseSPACE();
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s7 = peg$c94;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c95); }
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c143(s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseMAXLENGTH();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseSPACE();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseSPACE();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s3 = peg$c92;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseSPACE();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseSPACE();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCONSTANT_NAME();
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parseSPACE();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parseSPACE();
                      }
                      if (s6 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s7 = peg$c94;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c95); }
                        }
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c144(s5);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseMINBYTES();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseSPACE();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseSPACE();
                }
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s3 = peg$c92;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c93); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parseSPACE();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parseSPACE();
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseINTEGER();
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parseSPACE();
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parseSPACE();
                        }
                        if (s6 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s7 = peg$c94;
                            peg$currPos++;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c95); }
                          }
                          if (s7 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c145(s5);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseMINBYTES();
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parseSPACE();
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseSPACE();
                  }
                  if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s3 = peg$c92;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c93); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$parseSPACE();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parseSPACE();
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseCONSTANT_NAME();
                        if (s5 !== peg$FAILED) {
                          s6 = [];
                          s7 = peg$parseSPACE();
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            s7 = peg$parseSPACE();
                          }
                          if (s6 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s7 = peg$c94;
                              peg$currPos++;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c95); }
                            }
                            if (s7 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c146(s5);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseMAXBYTES();
                  if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseSPACE();
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parseSPACE();
                    }
                    if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c92;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c93); }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseSPACE();
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          s5 = peg$parseSPACE();
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseINTEGER();
                          if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parseSPACE();
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              s7 = peg$parseSPACE();
                            }
                            if (s6 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s7 = peg$c94;
                                peg$currPos++;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c95); }
                              }
                              if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c147(s5);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseMAXBYTES();
                    if (s1 !== peg$FAILED) {
                      s2 = [];
                      s3 = peg$parseSPACE();
                      while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseSPACE();
                      }
                      if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s3 = peg$c92;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c93); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = [];
                          s5 = peg$parseSPACE();
                          while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$parseSPACE();
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseCONSTANT_NAME();
                            if (s5 !== peg$FAILED) {
                              s6 = [];
                              s7 = peg$parseSPACE();
                              while (s7 !== peg$FAILED) {
                                s6.push(s7);
                                s7 = peg$parseSPACE();
                              }
                              if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                  s7 = peg$c94;
                                  peg$currPos++;
                                } else {
                                  s7 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                }
                                if (s7 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c148(s5);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseMIN();
                      if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$parseSPACE();
                        while (s3 !== peg$FAILED) {
                          s2.push(s3);
                          s3 = peg$parseSPACE();
                        }
                        if (s2 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c92;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c93); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parseSPACE();
                            while (s5 !== peg$FAILED) {
                              s4.push(s5);
                              s5 = peg$parseSPACE();
                            }
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseINTEGER();
                              if (s5 !== peg$FAILED) {
                                s6 = [];
                                s7 = peg$parseSPACE();
                                while (s7 !== peg$FAILED) {
                                  s6.push(s7);
                                  s7 = peg$parseSPACE();
                                }
                                if (s6 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 41) {
                                    s7 = peg$c94;
                                    peg$currPos++;
                                  } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                  }
                                  if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c149(s5);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseMIN();
                        if (s1 !== peg$FAILED) {
                          s2 = [];
                          s3 = peg$parseSPACE();
                          while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$parseSPACE();
                          }
                          if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                              s3 = peg$c92;
                              peg$currPos++;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c93); }
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = [];
                              s5 = peg$parseSPACE();
                              while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parseSPACE();
                              }
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseCONSTANT_NAME();
                                if (s5 !== peg$FAILED) {
                                  s6 = [];
                                  s7 = peg$parseSPACE();
                                  while (s7 !== peg$FAILED) {
                                    s6.push(s7);
                                    s7 = peg$parseSPACE();
                                  }
                                  if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s7 = peg$c94;
                                      peg$currPos++;
                                    } else {
                                      s7 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c150(s5);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseMAX();
                          if (s1 !== peg$FAILED) {
                            s2 = [];
                            s3 = peg$parseSPACE();
                            while (s3 !== peg$FAILED) {
                              s2.push(s3);
                              s3 = peg$parseSPACE();
                            }
                            if (s2 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 40) {
                                s3 = peg$c92;
                                peg$currPos++;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c93); }
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = [];
                                s5 = peg$parseSPACE();
                                while (s5 !== peg$FAILED) {
                                  s4.push(s5);
                                  s5 = peg$parseSPACE();
                                }
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseINTEGER();
                                  if (s5 !== peg$FAILED) {
                                    s6 = [];
                                    s7 = peg$parseSPACE();
                                    while (s7 !== peg$FAILED) {
                                      s6.push(s7);
                                      s7 = peg$parseSPACE();
                                    }
                                    if (s6 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c94;
                                        peg$currPos++;
                                      } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                      }
                                      if (s7 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c151(s5);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseMAX();
                            if (s1 !== peg$FAILED) {
                              s2 = [];
                              s3 = peg$parseSPACE();
                              while (s3 !== peg$FAILED) {
                                s2.push(s3);
                                s3 = peg$parseSPACE();
                              }
                              if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                  s3 = peg$c92;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = [];
                                  s5 = peg$parseSPACE();
                                  while (s5 !== peg$FAILED) {
                                    s4.push(s5);
                                    s5 = peg$parseSPACE();
                                  }
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseCONSTANT_NAME();
                                    if (s5 !== peg$FAILED) {
                                      s6 = [];
                                      s7 = peg$parseSPACE();
                                      while (s7 !== peg$FAILED) {
                                        s6.push(s7);
                                        s7 = peg$parseSPACE();
                                      }
                                      if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                          s7 = peg$c94;
                                          peg$currPos++;
                                        } else {
                                          s7 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c152(s5);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parsePATTERN();
                              if (s1 !== peg$FAILED) {
                                s2 = [];
                                s3 = peg$parseSPACE();
                                while (s3 !== peg$FAILED) {
                                  s2.push(s3);
                                  s3 = peg$parseSPACE();
                                }
                                if (s2 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 40) {
                                    s3 = peg$c92;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = [];
                                    s5 = peg$parseSPACE();
                                    while (s5 !== peg$FAILED) {
                                      s4.push(s5);
                                      s5 = peg$parseSPACE();
                                    }
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parseFORWARD_SLASH();
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parseREGEX();
                                        if (s6 !== peg$FAILED) {
                                          s7 = peg$parseFORWARD_SLASH();
                                          if (s7 !== peg$FAILED) {
                                            s8 = [];
                                            s9 = peg$parseSPACE();
                                            while (s9 !== peg$FAILED) {
                                              s8.push(s9);
                                              s9 = peg$parseSPACE();
                                            }
                                            if (s8 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 41) {
                                                s9 = peg$c94;
                                                peg$currPos++;
                                              } else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                              }
                                              if (s9 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c153(s6);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecommentStart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsenotAComment();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenotAComment();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecommentStop();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c154(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecommentStart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c155) {
      s1 = peg$c155;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c156); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c157.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c157.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c158); }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecommentStop() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c157.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c158); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c157.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c158); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c159;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c160); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenotAComment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsecommentStop();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsecommentStart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c161); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c162(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAPPLICATION() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c163) {
      s0 = peg$c163;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c164); }
    }

    return s0;
  }

  function peg$parseCONFIG() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c165) {
      s0 = peg$c165;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c166); }
    }

    return s0;
  }

  function peg$parsePATH() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c167) {
      s0 = peg$c167;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c168); }
    }

    return s0;
  }

  function peg$parseBASE_NAME() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c169) {
      s0 = peg$c169;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c170); }
    }

    return s0;
  }

  function peg$parsePACKAGE_NAME() {
    var s0;

    if (input.substr(peg$currPos, 11) === peg$c171) {
      s0 = peg$c171;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c172); }
    }

    return s0;
  }

  function peg$parseAUTHENTICATION_TYPE() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c173) {
      s0 = peg$c173;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c174); }
    }

    return s0;
  }

  function peg$parseHIBERNATE_CACHE() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c175) {
      s0 = peg$c175;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c176); }
    }

    return s0;
  }

  function peg$parseCLUSTERED_HTTP_SESSION() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c177) {
      s0 = peg$c177;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }

    return s0;
  }

  function peg$parseWEBSOCKET() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c179) {
      s0 = peg$c179;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c180); }
    }

    return s0;
  }

  function peg$parseDATABASE_TYPE() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c181) {
      s0 = peg$c181;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c182); }
    }

    return s0;
  }

  function peg$parseDEV_DATABASE_TYPE() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c183) {
      s0 = peg$c183;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c184); }
    }

    return s0;
  }

  function peg$parsePROD_DATABASE_TYPE() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c185) {
      s0 = peg$c185;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }

    return s0;
  }

  function peg$parseUSE_COMPASS() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c187) {
      s0 = peg$c187;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c188); }
    }

    return s0;
  }

  function peg$parseBUILD_TOOL() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c189) {
      s0 = peg$c189;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c190); }
    }

    return s0;
  }

  function peg$parseSEARCH_ENGINE() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c191) {
      s0 = peg$c191;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c192); }
    }

    return s0;
  }

  function peg$parseENABLE_TRANSLATION() {
    var s0;

    if (input.substr(peg$currPos, 17) === peg$c193) {
      s0 = peg$c193;
      peg$currPos += 17;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c194); }
    }

    return s0;
  }

  function peg$parseAPPLICATION_TYPE() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c195) {
      s0 = peg$c195;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c196); }
    }

    return s0;
  }

  function peg$parseTEST_FRAMEWORK() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c197) {
      s0 = peg$c197;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c198); }
    }

    return s0;
  }

  function peg$parseLANGUAGES() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c199) {
      s0 = peg$c199;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c200); }
    }

    return s0;
  }

  function peg$parseSERVER_PORT() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c201) {
      s0 = peg$c201;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c202); }
    }

    return s0;
  }

  function peg$parseENABLE_SOCIAL_SIGN_IN() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c203) {
      s0 = peg$c203;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c204); }
    }

    return s0;
  }

  function peg$parseUSE_SASS() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c205) {
      s0 = peg$c205;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c206); }
    }

    return s0;
  }

  function peg$parseJHI_PREFIX() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c207) {
      s0 = peg$c207;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c208); }
    }

    return s0;
  }

  function peg$parseMESSAGE_BROKER() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c209) {
      s0 = peg$c209;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c210); }
    }

    return s0;
  }

  function peg$parseSERVICE_DISCOVERY_TYPE() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c211) {
      s0 = peg$c211;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c212); }
    }

    return s0;
  }

  function peg$parseCLIENT_PACKAGE_MANAGER() {
    var s0;

    if (input.substr(peg$currPos, 20) === peg$c213) {
      s0 = peg$c213;
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c214); }
    }

    return s0;
  }

  function peg$parseCLIENT_FRAMEWORK() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c215) {
      s0 = peg$c215;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c216); }
    }

    return s0;
  }

  function peg$parseNATIVE_LANGUAGE() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c217) {
      s0 = peg$c217;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c218); }
    }

    return s0;
  }

  function peg$parseFRONT_END_BUILDER() {
    var s0;

    if (input.substr(peg$currPos, 15) === peg$c219) {
      s0 = peg$c219;
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c220); }
    }

    return s0;
  }

  function peg$parseSKIP_USER_MANAGEMENT() {
    var s0;

    if (input.substr(peg$currPos, 18) === peg$c221) {
      s0 = peg$c221;
      peg$currPos += 18;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c222); }
    }

    return s0;
  }

  function peg$parseENTITIES() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c26) {
      s0 = peg$c26;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    return s0;
  }

  function peg$parseTRUE() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c223) {
      s0 = peg$c223;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c224); }
    }

    return s0;
  }

  function peg$parseFALSE() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c225) {
      s0 = peg$c225;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c226); }
    }

    return s0;
  }

  function peg$parseENTITY() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c227) {
      s0 = peg$c227;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c228); }
    }

    return s0;
  }

  function peg$parseRELATIONSHIP() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c229) {
      s0 = peg$c229;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c230); }
    }

    return s0;
  }

  function peg$parseENUM() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c231) {
      s0 = peg$c231;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c232); }
    }

    return s0;
  }

  function peg$parseONE_TO_ONE() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c233) {
      s0 = peg$c233;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c234); }
    }

    return s0;
  }

  function peg$parseONE_TO_MANY() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c235) {
      s0 = peg$c235;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c236); }
    }

    return s0;
  }

  function peg$parseMANY_TO_ONE() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c237) {
      s0 = peg$c237;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c238); }
    }

    return s0;
  }

  function peg$parseMANY_TO_MANY() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c239) {
      s0 = peg$c239;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c240); }
    }

    return s0;
  }

  function peg$parseALL() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c241) {
      s0 = peg$c241;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c242); }
    }

    return s0;
  }

  function peg$parseSTAR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 42) {
      s0 = peg$c243;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c244); }
    }

    return s0;
  }

  function peg$parseWITH() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c245) {
      s0 = peg$c245;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c246); }
    }

    return s0;
  }

  function peg$parseEXCEPT() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c247) {
      s0 = peg$c247;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c248); }
    }

    return s0;
  }

  function peg$parseNO_FLUENT_METHOD() {
    var s0;

    if (input.substr(peg$currPos, 14) === peg$c249) {
      s0 = peg$c249;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c250); }
    }

    return s0;
  }

  function peg$parseDTO() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c251) {
      s0 = peg$c251;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c252); }
    }

    return s0;
  }

  function peg$parsePAGINATE() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c253) {
      s0 = peg$c253;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }

    return s0;
  }

  function peg$parseSERVICE() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c255) {
      s0 = peg$c255;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c256); }
    }

    return s0;
  }

  function peg$parseMICROSERVICE() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c257) {
      s0 = peg$c257;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c258); }
    }

    return s0;
  }

  function peg$parseSEARCH() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c259) {
      s0 = peg$c259;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c260); }
    }

    return s0;
  }

  function peg$parseSKIP_CLIENT() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c261) {
      s0 = peg$c261;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c262); }
    }

    return s0;
  }

  function peg$parseSKIP_SERVER() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c263) {
      s0 = peg$c263;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c264); }
    }

    return s0;
  }

  function peg$parseANGULAR_SUFFIX() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c265) {
      s0 = peg$c265;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c266); }
    }

    return s0;
  }

  function peg$parseFILTER() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c267) {
      s0 = peg$c267;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c268); }
    }

    return s0;
  }

  function peg$parseCLIENT_ROOT_FOLDER() {
    var s0;

    if (input.substr(peg$currPos, 16) === peg$c269) {
      s0 = peg$c269;
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c270); }
    }

    return s0;
  }

  function peg$parseREQUIRED() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c107) {
      s0 = peg$c107;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c108); }
    }

    return s0;
  }

  function peg$parseMINLENGTH() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c271) {
      s0 = peg$c271;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c272); }
    }

    return s0;
  }

  function peg$parseMAXLENGTH() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c273) {
      s0 = peg$c273;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c274); }
    }

    return s0;
  }

  function peg$parseMINBYTES() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c275) {
      s0 = peg$c275;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c276); }
    }

    return s0;
  }

  function peg$parseMAXBYTES() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c277) {
      s0 = peg$c277;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c278); }
    }

    return s0;
  }

  function peg$parseMAX() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c279) {
      s0 = peg$c279;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c280); }
    }

    return s0;
  }

  function peg$parseMIN() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c281) {
      s0 = peg$c281;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c282); }
    }

    return s0;
  }

  function peg$parsePATTERN() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c283) {
      s0 = peg$c283;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c284); }
    }

    return s0;
  }

  function peg$parseREGEX() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c285.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c286); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$c285.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c286); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c287(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseENUMNAME() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c137.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c48.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c48.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c139(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseENUMPROP() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c288.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c289); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c290.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c291); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c290.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c291); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c292(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCONSTANT_NAME() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c293.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c294); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c293.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c294); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c96(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINTEGER() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c295;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c296); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c65.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c297(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINJECTED_FIELD_NAME() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c298.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c299); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c300.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c301); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c300.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c301); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c139(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseENTITY_NAME() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c137.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c48.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c48.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c139(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFIELD_NAME() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c298.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c299); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c48.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c48.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c139(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSPACE() {
    var s0;

    if (peg$c302.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c303); }
    }

    return s0;
  }

  function peg$parseSPACE_WITHOUT_NEWLINE() {
    var s0;

    if (peg$c304.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c305); }
    }

    return s0;
  }

  function peg$parseFORWARD_SLASH() {
    var s0;

    if (peg$c306.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c307); }
    }

    return s0;
  }


    function addUniqueElements(array1, array2) {
      if (array2) {
        for (let i = 0; i < array2.length; i++) {
          if (array1.indexOf(array2[i]) === -1) {
            array1.push(array2[i]);
          }
        }
      }
      return array1;
    }

    function flattenArray(array) {
      var newArray = [];
      for (let i = 0; i < array.length; i ++) {
        if (!array[i].length) {
          newArray.push(array[i]);
        } else {
          for (let j = 0; j < array[i].length; j++) {
            newArray.push(array[i][j]);
          }
        }
      }
      return newArray;
    }

    function addCardinalityToRelationships(cardinality, relationships) {
      if (!relationships) {
        return;
      }
      for (let i = 0; i < relationships.length; i++) {
        relationships[i].cardinality = cardinality;
      }
    }

    function addToApplicationDecl(passedApplicationDecl, key, value) {
      let applicationDecl = passedApplicationDecl || {};
      applicationDecl[key] = value;
      return applicationDecl;
    }

    const parsed = {
      applications: [],
      constants: {},
      entities: [],
      relationships: [],
      enums: [],
      dto: {},
      pagination: {},
      service: {},
      microservice: {},
      searchEngine: {},
      noClient: { list: [], excluded: [] },
      noServer: { list: [], excluded: [] },
      filter: { list: [], excluded: [] },
      angularSuffix: {},
      noFluentMethod: { list: [], excluded: [] },
      clientRootFolder: {}
    };


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
