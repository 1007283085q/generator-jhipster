/**
 * This is the grammar we use to generate the parser jhGrammar.js.
 * We use the online tool at http://pegjs.org/online to write the parser.
 */

{
  function addUniqueElements(array1, array2) {
    if (array2) {
      for (let i = 0; i < array2.length; i++) {
        if (array1.indexOf(array2[i]) === -1) {
          array1.push(array2[i]);
        }
      }
    }
    return array1;
  }

  function flattenArray(array) {
    var newArray = [];
    for (let i = 0; i < array.length; i ++) {
      if (!array[i].length) {
        newArray.push(array[i]);
      } else {
        for (let j = 0; j < array[i].length; j++) {
          newArray.push(array[i][j]);
        }
      }
    }
    return newArray;
  }

  function addCardinalityToRelationships(cardinality, relationships) {
    if (!relationships) {
      return;
    }
    for (let i = 0; i < relationships.length; i++) {
      relationships[i].cardinality = cardinality;
    }
  }

  function addToApplicationDecl(passedApplicationDecl, key, value) {
    let applicationDecl = passedApplicationDecl || {};
    applicationDecl[key] = value;
    return applicationDecl;
  }

  const parsed = {
    applications: [],
    constants: {},
    entities: [],
    relationships: [],
    enums: [],
    dto: {},
    pagination: {},
    service: {},
    microservice: {},
    searchEngine: {},
    noClient: { list: [], excluded: [] },
    noServer: { list: [], excluded: [] },
    filter: { list: [], excluded: [] },
    angularSuffix: {},
    noFluentMethod: { list: [], excluded: [] }
  };
}

start = p:prog {
    p.applications.reverse();
    return p;
  }

prog
  = SPACE* constantDecl:constantDecl SPACE* p:prog {
    parsed.constants[constantDecl.name] = constantDecl.value;
    return parsed;
  }
  / SPACE* applicationDeclaration:applicationDecl SPACE* p:prog {
    parsed.applications.push(applicationDeclaration);
    return parsed;
  }
  / SPACE* ed:entityDecl SPACE* p:prog {
    parsed.entities = addUniqueElements([ed], parsed.entities);
    return parsed;
  }
  / SPACE* rd:relationDecl SPACE* p:prog {
    parsed.relationships = flattenArray(addUniqueElements([rd], parsed.relationships));
    return parsed;
  }
  / SPACE* end:enumDecl SPACE* p:prog {
    parsed.enums = addUniqueElements([end], parsed.enums);
    return parsed;
  }
  / SPACE* dto:dtoDecl SPACE* p:prog {
    parsed.dto = dto;
    return parsed;
  }
  / SPACE* pagination:pagiDecl SPACE* p:prog {
    parsed.pagination = pagination;
    return parsed;
  }
  / SPACE* service:serviceDecl SPACE* p:prog {
    parsed.service = service;
    return parsed;
  }
  / SPACE* comment SPACE* p:prog { return parsed; }
  / SPACE* microservice:microserviceDecl1 SPACE* p:prog {
    parsed.microservice = microservice;
    return parsed;
  }
  / SPACE* searchEngine:searchEngineDecl SPACE* p:prog {
    parsed.searchEngine = searchEngine;
    return parsed;
  }
  / SPACE* noClient:noClientDecl SPACE* p:prog {
    parsed.noClient = noClient;
    return parsed;
  }
  / SPACE* noServer:noServerDecl SPACE* p:prog {
    parsed.noServer = noServer;
    return parsed;
  }
  / SPACE* angularSuffix:angularSuffixDecl SPACE* p:prog {
    parsed.angularSuffix = angularSuffix;
    return parsed;
  }
  / SPACE* noFluentMethod:noFluentMethod SPACE* p:prog {
    parsed.noFluentMethod = noFluentMethod;
    return parsed;
  }
  / SPACE* filter:filterDecl SPACE* p:prog {
    parsed.filter = filter;
    return parsed;
  }
  / '' { return parsed; }

// Application Declaration
applicationDecl
  = APPLICATION SPACE* '{' SPACE* applicationContent:applicationContentDecl? SPACE* '}' {
    return applicationContent;
  }

applicationContentDecl
  = BASE_NAME SPACE* baseName:[A-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'baseName', baseName.join(''));
  }
  / PATH SPACE* path:[^\n]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'path', path.join(''));
  }
  / PACKAGE_NAME SPACE* packageName:(([a-z]+'.')*[a-z]+) SPACE* applicationContentDecl:applicationContentDecl {
    applicationContentDecl = addToApplicationDecl(
      applicationContentDecl,
      'packageName',
      packageName.join('').replace(/,/g, '')
    );
    return addToApplicationDecl(
      applicationContentDecl,
      'packageFolder',
      applicationContentDecl.packageName.replace(/[.]/g, '/')
    );
  }
  / AUTHENTICATION_TYPE SPACE* authenticationType:[A-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'authenticationType', authenticationType.join(''));
  }
  / HIBERNATE_CACHE SPACE* hibernateCache:[A-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'hibernateCache', hibernateCache.join(''));
  }
  / CLUSTERED_HTTP_SESSION SPACE* clusteredHttpSession:[A-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'clusteredHttpSession', clusteredHttpSession.join(''));
  }
  / WEBSOCKET SPACE* websocket:[A-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'websocket', websocket.join(''));
  }
  / DATABASE_TYPE SPACE* databaseType:[a-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'databaseType', databaseType.join(''));
  }
  / DEV_DATABASE_TYPE SPACE* devDatabaseType:[A-z0-9]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'devDatabaseType', devDatabaseType.join(''));
  }
  / PROD_DATABASE_TYPE SPACE* prodDatabaseType:[A-z0-9]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'prodDatabaseType', prodDatabaseType.join(''));
  }
  / USE_COMPASS SPACE* useCompass:booleanChoice SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'useCompass', useCompass);
  }
  / BUILD_TOOL SPACE* buildTool:[A-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'buildTool', buildTool.join(''));
  }
  / SEARCH_ENGINE SPACE* searchEngine:booleanChoice SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'searchEngine', searchEngine);
  }
  / ENABLE_TRANSLATION SPACE* enableTranslation:booleanChoice SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'enableTranslation', enableTranslation);
  }
  / APPLICATION_TYPE SPACE* applicationType:[a-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'applicationType', applicationType.join(''));
  }
  / TEST_FRAMEWORK SPACE* testFrameworks:[a-z, ]+ SPACE* applicationContentDecl:applicationContentDecl {
    const testFrameworkEntries = [];
    const results = testFrameworks.join('').split(',');
    for (let i = 0; i < results.length; i++) {
      if (results[i].trim().length !== 0) {
        testFrameworkEntries.push(results[i].trim());
      }
    }
    return addToApplicationDecl(applicationContentDecl, 'testFrameworks', testFrameworkEntries);
  }
  / LANGUAGES SPACE* languages:[a-z, ]+ SPACE* applicationContentDecl:applicationContentDecl {
    const languageEntries = [];
    const results = languages.join('').split(',');
    for (let i = 0; i < results.length; i++) {
      if (results[i].trim().length !== 0) {
        languageEntries.push(results[i].trim());
      }
    }
    return addToApplicationDecl(applicationContentDecl, 'languages', languageEntries);
  }
  / SERVER_PORT SPACE* serverPort:[0-9]+ SPACE* applicationContentDecl:applicationContentDecl {
  	return addToApplicationDecl(applicationContentDecl, 'serverPort', parseInt(serverPort.join(''), 10));
  }
  / ENABLE_SOCIAL_SIGN_IN SPACE* enableSocialSignIn:booleanChoice SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'enableSocialSignIn', enableSocialSignIn);
  }
  / USE_SASS SPACE* useSass:booleanChoice SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'useSass', useSass);
  }
  / JHI_PREFIX SPACE* jhiPrefix:[A-z0-9_-]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'jhiPrefix', jhiPrefix.join(''));
  }
  / MESSAGE_BROKER SPACE* messageBroker:booleanChoice SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'messageBroker', messageBroker);
  }
  / SERVICE_DISCOVERY_TYPE SPACE* serviceDiscoveryType:[A-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    const choice = serviceDiscoveryType.join('');
    switch (choice) {
    case 'true':
      return addToApplicationDecl(applicationContentDecl, 'serviceDiscoveryType', true);
      break;
    case 'false':
      return addToApplicationDecl(applicationContentDecl, 'serviceDiscoveryType', false);
      break;
    default:
      return addToApplicationDecl(applicationContentDecl, 'serviceDiscoveryType', choice.join(''));
    }
  }
  / CLIENT_PACKAGE_MANAGER SPACE* clientPackageManager:[A-z]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'clientPackageManager', clientPackageManager.join(''));
  }
  / CLIENT_FRAMEWORK SPACE* clientFramework:[A-z0-9]+ SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'clientFramework', clientFramework.join(''));
  }
  / NATIVE_LANGUAGE SPACE* nativeLanguage:[a-z]+ applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'nativeLanguage', nativeLanguage.join(''));
  }
  / FRONT_END_BUILDER SPACE* frontEndBuilder:[A-z]+ applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'frontEndBuilder', frontEndBuilder.join(''));
  }
  / SKIP_USER_MANAGEMENT SPACE* skipUserManagement:booleanChoice SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'skipUserManagement', skipUserManagement.join(''));
  }
  / SKIP_CLIENT SPACE* skipClient:booleanChoice SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'skipClient', skipClient);
  }
  / SKIP_SERVER SPACE* skipServer:booleanChoice SPACE* applicationContentDecl:applicationContentDecl {
    return addToApplicationDecl(applicationContentDecl, 'skipServer', skipServer);
  }
  / ENTITIES SPACE+ entities:simpleEntityList SPACE* ex:exclusion? SPACE* applicationContentDecl:applicationContentDecl {
    const entityEntries = [];
    for (let i = 0; i < entities.length; i++) {
      if (entities[i].trim().length !== 0) {
        entityEntries.push(entities[i].trim());
      }
    }
    return addToApplicationDecl(applicationContentDecl, 'entities', entityEntries);
  }
  / comment SPACE* applicationContentDecl:applicationContentDecl { return applicationContentDecl; }
  / ''

booleanChoice
  = TRUE { return true; }
  / FALSE { return false; }

constantDecl
  = name:CONSTANT_NAME SPACE* '=' SPACE* value:INTEGER { return { name: name, value: value }; }

//Entities
entityDecl
  = jd:comment? SPACE* ENTITY SPACE* e:ENTITY_NAME SPACE* tableName:entityTableNameDecl? SPACE* eb:entityBody? SPACE*  {
    return { name: e, tableName: tableName ? tableName: e, body: eb, javadoc: jd };
  }
  / ENTITY SPACE* e:ENTITY_NAME SPACE* eb:entityBody? { return { name: e, body: eb, javadoc: '' }; }

entityTableNameDecl
  = '(' SPACE* name:[A-z0-9_-]+ SPACE* ')' { return name.join(''); }

entityBody
  = '{' SPACE* fdl:fieldDeclList SPACE* '}' { return fdl; }
  / '' { return []; }

fieldDeclList
  = SPACE* com:comment? SPACE* f:FIELD_NAME SPACE_WITHOUT_NEWLINE* t:type SPACE_WITHOUT_NEWLINE* vl:validationList? SPACE_WITHOUT_NEWLINE* com2:comment? SPACE_WITHOUT_NEWLINE* ','? SPACE* fdl:fieldDeclList {
    return addUniqueElements([{ name: f, type: t, validations: vl, javadoc: com || com2 }], fdl );
  }
  / '' { return []; }

validationList
  = v:validation SPACE_WITHOUT_NEWLINE* vl:validationList { return addUniqueElements([v], vl); }
  / '' { return []; }

//Relationship
relationDecl
  = RELATIONSHIP SPACE rt:relationshipType SPACE* '{' SPACE* bodies:relationshipBodies SPACE* '}' {
        addCardinalityToRelationships(rt, bodies);
        return addUniqueElements([], bodies);
    }

relationshipBodies
  = rb:relationshipBody SPACE* ','? SPACE* morerb:relationshipBodies { return addUniqueElements([rb], morerb); }
  / rb:relationshipBody { return [rb]; }

relationshipBody
  = from:relationshipSide SPACE* 'to' SPACE* to:relationshipSide SPACE*  {
    return { from: from , to: to };
  }

relationshipSide
  = jd:comment? SPACE* e:ENTITY_NAME SPACE* '{' SPACE* i:INJECTED_FIELD_NAME SPACE* required:'required'? '}' SPACE* {
    return { name: e, injectedfield: i, javadoc: jd, required: required ? true : false };
  }
  / jd:comment? SPACE* e:ENTITY_NAME SPACE* ('{' SPACE* '}')? SPACE* {
    return { name: e, injectedfield: null, javadoc: jd };
  }
  / e:ENTITY_NAME SPACE { return { name: e, injectedfield: null, javadoc: '' }; }


//Enum
enumDecl
  = ENUM SPACE e:ENUMNAME SPACE* '{' SPACE* el:enumPropList SPACE* '}' {
    return { name: e, values: el };
  }

enumPropList
  = e:ENUMPROP SPACE* ',' SPACE* el:enumPropList { return addUniqueElements([e], el); }
  / e:ENUMPROP { return [e]; }

exclusion
  = EXCEPT SPACE+ sub:exclusionSub { return sub; }

exclusionSub
  = e:ENTITY_NAME SPACE* ',' SPACE* sub:exclusionSub { return addUniqueElements([e], sub); }
  / e:ENTITY_NAME { return [e]; }

// noFluentMethod
noFluentMethod
  = NO_FLUENT_METHOD SPACE FOR SPACE+ decl:subNoFluentMethod SPACE* ex:exclusion? SPACE*  {
    addUniqueElements(parsed.noFluentMethod.list, decl);
    if (ex) {
      addUniqueElements(parsed.noFluentMethod.excluded, ex);
    }
    return parsed.noFluentMethod;
  }

subNoFluentMethod
  = e:ENTITY_NAME SPACE* ',' SPACE* sub:subNoFluentMethod { return addUniqueElements([e], sub); }
  / STAR { return ['*']; }
  / ALL { return ['*']; }
  / e:ENTITY_NAME { return [e]; }

// DTO
dtoDecl
  = DTO SPACE+ decl:entityList SPACE* ex:exclusion? SPACE*  {
    parsed.dto[decl[decl.length - 1]] = parsed.dto[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(parsed.dto[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
    	addUniqueElements(parsed.dto[decl[decl.length - 1]].excluded, ex);
    }
    return parsed.dto;
  }

// Pagination
pagiDecl
  = PAGINATE SPACE+ decl:entityList SPACE* ex:exclusion? SPACE*  {
  	parsed.pagination[decl[decl.length - 1]] =
      parsed.pagination[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(parsed.pagination[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
    	addUniqueElements(parsed.pagination[decl[decl.length - 1]].excluded, ex);
    }
    return parsed.pagination;
  }

// Service
serviceDecl
  = SERVICE SPACE+ decl:entityList SPACE* ex:exclusion? SPACE*  {
  	parsed.service[decl[decl.length - 1]] =
      parsed.service[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(parsed.service[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
    	addUniqueElements(parsed.service[decl[decl.length - 1]].excluded, ex);
    }
    return parsed.service;
  }

// first way of declaring microservices
microserviceDecl1
  = MICROSERVICE SPACE+ decl:entityList SPACE* ex:exclusion? SPACE*  {
    parsed.microservice[decl[decl.length - 1]] =
      parsed.microservice[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(parsed.microservice[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
      addUniqueElements(parsed.microservice[decl[decl.length - 1]].excluded, ex);
    }
    return parsed.microservice;
  }

// searchEngine
searchEngineDecl
  = SEARCH SPACE+ decl:entityList SPACE* ex:exclusion? SPACE*  {
    parsed.searchEngine[decl[decl.length - 1]] =
      parsed.searchEngine[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(parsed.searchEngine[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
      addUniqueElements(parsed.searchEngine[decl[decl.length - 1]].excluded, ex);
    }
    return parsed.searchEngine;
  }

// skipClient option
noClientDecl
  = SKIP_CLIENT SPACE FOR SPACE* decl:subNoClientDecl SPACE* ex:exclusion? SPACE*  {
    addUniqueElements(parsed.noClient.list, decl);
    if (ex) {
      addUniqueElements(parsed.noClient.excluded, ex);
    }
    return parsed.noClient;
  }

subNoClientDecl
  = e:ENTITY_NAME SPACE* ',' SPACE* sub:subNoClientDecl { return addUniqueElements([e], sub); }
  / STAR { return ['*']; }
  / ALL { return ['*']; }
  / e:ENTITY_NAME { return [e]; }


// skipServer option
noServerDecl
  = SKIP_SERVER SPACE FOR SPACE* decl:subNoServerDecl SPACE* ex:exclusion? SPACE*  {
    addUniqueElements(parsed.noServer.list, decl);
    if (ex) {
      addUniqueElements(parsed.noServer.excluded, ex);
    }
    return parsed.noServer;
  }

subNoServerDecl
  = e:ENTITY_NAME SPACE* ',' SPACE* sub:subNoServerDecl { return addUniqueElements([e], sub); }
  / STAR { return ['*']; }
  / ALL { return ['*']; }
  / e:ENTITY_NAME { return [e]; }

// JPA Metamodel filter option
filterDecl
  = FILTER SPACE decl:subFilterDecl SPACE* ex:exclusion? SPACE*  {
    addUniqueElements(parsed.filter.list, decl);
    if (ex) {
      addUniqueElements(parsed.filter.excluded, ex);
    }
    return parsed.filter;
  }

subFilterDecl
  = e:ENTITY_NAME SPACE* ',' SPACE* sub:subFilterDecl { return addUniqueElements([e], sub); }
  / STAR { return ['*']; }
  / ALL { return ['*']; }
  / e:ENTITY_NAME { return [e]; }


// angularSuffix option
angularSuffixDecl
  = ANGULAR_SUFFIX SPACE* decl:entityList SPACE* ex:exclusion? SPACE*  {
    parsed.angularSuffix[decl[decl.length - 1]] =
      parsed.angularSuffix[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(parsed.angularSuffix[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
      addUniqueElements(parsed.angularSuffix[decl[decl.length - 1]].excluded, ex);
    }
    return parsed.angularSuffix;
  }

// common way to declare an entity list
entityList
  = e:ENTITY_NAME SPACE* ',' SPACE* sub:entityList { return addUniqueElements([e], sub); }
  / STAR SPACE* WITH SPACE* method:([A-z0-9-]+) { return ['*', method.toString().replace(/,/g,'')]; }
  / ALL SPACE* WITH SPACE* method:([A-z0-9-]+) { return ['*', method.toString().replace(/,/g,'')]; }
  / e:ENTITY_NAME SPACE* WITH SPACE* method:([A-z0-9-]+) { return [e, method.toString().replace(/,/g,'')]; }

simpleEntityList
  = e:ENTITY_NAME SPACE* ',' SPACE* sub:simpleEntityList { return addUniqueElements([e], sub); }
  / STAR SPACE* { return ['*']; }
  / ALL SPACE* { return ['*']; }
  / e:ENTITY_NAME SPACE* { return [e]; }

relationshipType
= ONE_TO_ONE { return 'one-to-one'; }
/ ONE_TO_MANY { return 'one-to-many'; }
/ MANY_TO_ONE { return 'many-to-one'; }
/ MANY_TO_MANY { return 'many-to-many'; }

type = head:[A-Z]tail:[A-z0-9]* { return `${head}${tail.join('')}`; }

validation
  = REQUIRED { return { key: 'required', value: '' }; }
  / MINLENGTH SPACE* '(' SPACE* int:INTEGER SPACE* ')' { return { key: 'minlength', value: int }; }
  / MINLENGTH SPACE* '(' SPACE* constantName:CONSTANT_NAME SPACE* ')' { return { key: 'minlength', value: constantName, constant: true }; }
  / MAXLENGTH SPACE* '(' SPACE* int:INTEGER SPACE* ')' { return { key: 'maxlength', value: int }; }
  / MAXLENGTH SPACE* '(' SPACE* constantName:CONSTANT_NAME SPACE* ')' { return { key: 'maxlength', value: constantName, constant: true }; }
  / MINBYTES SPACE* '(' SPACE* int:INTEGER SPACE* ')' { return { key: 'minbytes', value: int }; }
  / MINBYTES SPACE* '(' SPACE* constantName:CONSTANT_NAME SPACE* ')' { return { key: 'minbytes', value: constantName, constant: true }; }
  / MAXBYTES SPACE* '(' SPACE* int:INTEGER SPACE* ')' { return { key: 'maxbytes', value: int }; }
  / MAXBYTES SPACE* '(' SPACE* constantName:CONSTANT_NAME SPACE* ')' { return { key: 'maxbytes', value: constantName, constant: true }; }
  / MIN SPACE* '(' SPACE* int:INTEGER SPACE* ')' { return { key: 'min', value: int };}
  / MIN SPACE* '(' SPACE* constantName:CONSTANT_NAME SPACE* ')' { return { key: 'min', value: constantName, constant: true }; }
  / MAX SPACE* '(' SPACE* int:INTEGER SPACE* ')' { return { key: 'max', value: int };}
  / MAX SPACE* '(' SPACE* constantName:CONSTANT_NAME SPACE* ')' { return { key: 'max', value: constantName, constant: true }; }
  / PATTERN SPACE* '(' SPACE* FORWARD_SLASH regex:REGEX FORWARD_SLASH SPACE* ')' { return { key: 'pattern', value: regex }; }

// Comments
comment = commentStart notAComment:notAComment* commentStop { return notAComment.join(''); }
commentStart = '/*' [*]*
commentStop = [*]+ '/'
// a completely ignored comment, will not be a Javadoc comment
notAComment = !commentStop !commentStart char:. { return char; }

// Constants
// Application constants
APPLICATION = 'application'
BASE_NAME = 'baseName'
PATH = 'path'
PACKAGE_NAME = 'packageName'
AUTHENTICATION_TYPE = 'authenticationType'
HIBERNATE_CACHE = 'hibernateCache'
CLUSTERED_HTTP_SESSION = 'clusteredHttpSession'
WEBSOCKET = 'websocket'
DATABASE_TYPE = 'databaseType'
DEV_DATABASE_TYPE = 'devDatabaseType'
PROD_DATABASE_TYPE = 'prodDatabaseType'
USE_COMPASS = 'useCompass'
BUILD_TOOL = 'buildTool'
SEARCH_ENGINE = 'searchEngine'
ENABLE_TRANSLATION = 'enableTranslation'
APPLICATION_TYPE = 'applicationType'
TEST_FRAMEWORK = 'testFrameworks'
LANGUAGES = 'languages'
SERVER_PORT = 'serverPort'
ENABLE_SOCIAL_SIGN_IN = 'enableSocialSignIn'
USE_SASS = 'useSass'
JHI_PREFIX = 'jhiPrefix'
MESSAGE_BROKER = 'messageBroker'
SERVICE_DISCOVERY_TYPE = 'serviceDiscoveryType'
CLIENT_PACKAGE_MANAGER = 'clientPackageManager'
CLIENT_FRAMEWORK = 'clientFramework'
NATIVE_LANGUAGE = 'nativeLanguage'
FRONT_END_BUILDER = 'frontendBuilder'
SKIP_USER_MANAGEMENT = 'skipUserManagement'
ENTITIES = 'entities'
// skipClient & skipServer are already defined
TRUE = 'true'
FALSE = 'false'
// Entity constants
ENTITY = 'entity'
RELATIONSHIP = 'relationship'
ENUM = 'enum'
// Relationship types
ONE_TO_ONE = 'OneToOne'
ONE_TO_MANY = 'OneToMany'
MANY_TO_ONE = 'ManyToOne'
MANY_TO_MANY = 'ManyToMany'
// Options
ALL = 'all'
STAR = '*'
FOR = 'for'
WITH = 'with'
EXCEPT = 'except'
NO_FLUENT_METHOD = 'noFluentMethod'
DTO = 'dto'
PAGINATE = 'paginate'
SERVICE = 'service'
MICROSERVICE = 'microservice'
SEARCH = 'search'
SKIP_CLIENT = 'skipClient'
SKIP_SERVER = 'skipServer'
ANGULAR_SUFFIX = 'angularSuffix'
FILTER = 'filter'
// validations
REQUIRED = 'required'
MINLENGTH = 'minlength'
MAXLENGTH = 'maxlength'
MINBYTES = 'minbytes'
MAXBYTES = 'maxbytes'
MAX = 'max'
MIN = 'min'
PATTERN = 'pattern'

REGEX = pattern:[^\n\r/]* { return pattern.join(''); }

ENUMNAME = head:[A-Z]tail:[A-z0-9]* { return `${head}${tail.join('')}`; }
ENUMPROP = underscore:[_]*head:[A-Z0-9]tail:[A-Z0-9_]* {
    return `${underscore.join('')}${head}${tail.join('')}`;
  }
CONSTANT_NAME = name:[A-Z_]+ { return name.join(''); }
INTEGER = negative:'-'?int:[0-9]+ { return parseInt(`${(negative ? negative : '') + int.join('')}`, 10); }
INJECTED_FIELD_NAME = head:[a-zA-Z]tail:[A-z0-9()]* { return `${head}${tail.join('')}`; }
ENTITY_NAME = head:[A-Z]tail:[A-z0-9]* { return `${head}${tail.join('')}`; }
FIELD_NAME = head:[a-zA-Z]tail:[A-z0-9]* { return `${head}${tail.join('')}`; }
SPACE = ['\n'|'\t'|'\r'|' '|\u2028|\u2029]
SPACE_WITHOUT_NEWLINE = ['\t'|' '|\u2028|\u2029]
FORWARD_SLASH = [/]
