/**
 * This the grammar we use to generate the parser jhGrammar.js.
 * We use the online tool http://pegjs.org/online to generate the parser.
 * Modifying this file won't affect the program, this is just to have a more readable grammar.
 */

{
  function addUniqueElements(array1, array2){
    if (array2) {
      for (let i = 0; i < array2.length; i++) {
        if (array1.indexOf(array2[i]) === -1) {
          array1.push(array2[i]);
        }
      }
    }
    return array1;
  }

  function flattenArray(array) {
    var newArray = [];
    for (let i = 0; i < array.length; i ++) {
      if (!array[i].length) {
        newArray.push(array[i]);
      } else {
        for (let j = 0; j < array[i].length; j++) {
          newArray.push(array[i][j]);
        }
      }
    }
    return newArray;
  }

  function addCardinalityToRelationships(cardinality, relationships) {
    if (!relationships) {
      return;
    }
    for (let i = 0; i < relationships.length; i++) {
      relationships[i].cardinality = cardinality;
    }
  }

  var entities = [];
  var relationships = [];
  var enums = [];
  var dto = {};
  var pagination = {};
  var service = {};
  var microservice = {};
  var searchEngine = {};
  var noClient = { list: [], excluded: [] };
  var noServer = { list: [], excluded: [] };
  var angularSuffix = {};
  var noFluentMethod = { list: [], excluded: [] };
}

start = p:prog { return p; }

prog
  = space* ed:entityDecl space* p:prog {
    return {entities: addUniqueElements([ed],p.entities) , relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* rd:relationDecl space* p:prog {return {entities: p.entities, relationships: flattenArray(addUniqueElements([rd],p.relationships)), enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* end:enumDecl space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: addUniqueElements([end], p.enums), dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* dto:dtoDecl space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* pagination:pagiDecl space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* service:serviceDecl space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* Comment space* p:prog {return {entities: p.entities,relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* JDLComment space* p:prog {return {entities: p.entities,relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* microservice:microserviceDecl1 space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* searchEngine:searchEngineDecl space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* noClient:noClientDecl space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* noServer:noServerDecl space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* angularSuffix:angularSuffixDecl space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / space* noFluentMethod:noFluentMethod space* p:prog {return {entities: p.entities, relationships: p.relationships, enums: p.enums, dto: p.dto, pagination: p.pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}
  / '' {return {entities: entities,relationships: relationships, enums: enums, dto: dto, pagination: pagination, service: service, microservice: microservice, searchEngine: searchEngine, noClient: noClient, noServer: noServer, angularSuffix: angularSuffix, noFluentMethod: noFluentMethod};}

//Entities
entityDecl
  = jd:Comment? space* JDLComment? space* 'entity' space* e:ENTITYNAME space* tableName:entityTableNameDecl? space* eb:entityBody? space* JDLComment? {return {'name': e, tableName: tableName ? tableName: e, 'body':eb, 'javadoc':jd};}
  / 'entity' space* e:ENTITYNAME space* eb:entityBody? {return {'name': e, 'body':eb, 'javadoc':''};}

entityTableNameDecl
  = '(' space* name:[A-z0..9_-]+ space* ')' {return name.join('');}

entityBody
  = '{' space* JDLComment? space* fdl:fieldDeclList space* JDLComment? space* '}' {return fdl;}
  / '' {return [];}

fieldDeclList
  = JDLComment? space* com:Comment? space* JDLComment? space* f:FIELDNAME space t:type space* vl:validationList? space* com2:Comment? space* ','? space* JDLComment? space* fdl:fieldDeclList {return addUniqueElements([{'name': f, 'type': t, 'validations': vl, 'javadoc': com||com2}], fdl );}
  / com:Comment? space* f:FIELDNAME space t:type space* vl:validationList {return [{'name': f, 'type': t, 'validations': vl, 'javadoc': com}];}
  / '' {return [];}

validationList
  = v:validation space* vl:validationList {return addUniqueElements([v], vl);}
  / '' {return [];}

//Relationship
relationDecl
  = 'relationship' space rt:relationshipType space* '{' space* JDLComment? space* bodies:relationshipBodies space* JDLComment? space* '}' {
        addCardinalityToRelationships(rt, bodies);
        return addUniqueElements([], bodies);
    }

relationshipBodies
  = rb:relationshipBody space* ',' space* morerb:relationshipBodies { return addUniqueElements([rb], morerb); }
  / rb:relationshipBody { return [rb]; }

relationshipBody
  = from:relationshipSide space* JDLComment? space* 'to' space* JDLComment? space* to:relationshipSide space* JDLComment? {return {'from': from , 'to': to};}

relationshipSide
  = jd:Comment? space* e:ENTITYNAME space* '{' space* i:INJECTEDFIELDNAME space* required:'required'? '}' space* {return {'name' :e, 'injectedfield': i, 'javadoc': jd, 'required': required ? true: false};}
  / jd:Comment? space* e:ENTITYNAME space* ('{' space* '}')? space* {return {'name' :e, 'injectedfield': null, 'javadoc': jd};}
  / e:ENTITYNAME space {return {'name' :e, 'injectedfield': null, 'javadoc': ''};}


//Enum
enumDecl
  = 'enum' space e:ENUMNAME space* '{' space* JDLComment? space* el:enumPropList space* JDLComment? space* '}' {return {'name':e, 'values': el };}

enumPropList
  = e:ENUMPROP space* ',' space* JDLComment? space* el:enumPropList {return addUniqueElements([e],el);}
  / e:ENUMPROP {return [e];}

exclusion
  = 'except' space+ sub:exclusionSub {return sub;}

exclusionSub
  = e:ENTITYNAME space* ',' space* sub:exclusionSub {return addUniqueElements([e], sub);}
  / e:ENTITYNAME {return [e];}

// noFluentMethod
noFluentMethod
  = 'noFluentMethod for' space+ decl:subNoFluentMethod space* ex:exclusion? space* JDLComment? {
    addUniqueElements(noFluentMethod.list, decl);
    if (ex) {
        addUniqueElements(noFluentMethod.excluded, ex);
    }
  }

subNoFluentMethod
  = e:ENTITYNAME space* ',' space* sub:subNoFluentMethod {return concat([e], sub);}
  / '*' {return ['*'];}
  / 'all'{return ['*'];}
  / e:ENTITYNAME {return [e];}

// DTO
dtoDecl
  = 'dto' space+ decl:entityList space* ex:exclusion? space* JDLComment? {
    dto[decl[decl.length - 1]] = dto[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(dto[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
    	addUniqueElements(dto[decl[decl.length - 1]].excluded, ex);
    }
  }

// Pagination
pagiDecl
  = 'paginate' space+ decl:entityList space* ex:exclusion? space* JDLComment? {
  	pagination[decl[decl.length - 1]] = pagination[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(pagination[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
    	addUniqueElements(pagination[decl[decl.length - 1]].excluded, ex);
    }
  }

// Service
serviceDecl
  = 'service' space+ decl:entityList space* ex:exclusion? space* JDLComment? {
  	service[decl[decl.length - 1]] = service[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(service[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
    	addUniqueElements(service[decl[decl.length - 1]].excluded, ex);
    }
  }

// first way of declaring microservices
microserviceDecl1
  = 'microservice' space+ decl:entityList space* ex:exclusion? space* JDLComment? {
    microservice[decl[decl.length - 1]] = microservice[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(microservice[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
        addUniqueElements(microservice[decl[decl.length - 1]].excluded, ex);
    }
  }

// searchEngine
searchEngineDecl
  = 'search' space+ decl:entityList space* ex:exclusion? space* JDLComment? {
    searchEngine[decl[decl.length - 1]] = searchEngine[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(searchEngine[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
        addUniqueElements(searchEngine[decl[decl.length - 1]].excluded, ex);
    }
  }

// skipClient option
noClientDecl
  = 'skipClient for' space* decl:subNoClientDecl space* ex:exclusion? space* JDLComment? {
    addUniqueElements(noClient.list, decl);
    if (ex) {
        addUniqueElements(noClient.excluded, ex);
    }
  }

subNoClientDecl
  = e:ENTITYNAME space* ',' space* sub:subNoClientDecl {return concat([e], sub);}
  / '*' {return ['*'];}
  / 'all'{return ['*'];}
  / e:ENTITYNAME {return [e];}


// skipServer option
noServerDecl
  = 'skipServer for' space* decl:subNoServerDecl space* ex:exclusion? space* JDLComment? {
    addUniqueElements(noServer.list, decl);
    if (ex) {
        addUniqueElements(noServer.excluded, ex);
    }
  }

subNoServerDecl
  = e:ENTITYNAME space* ',' space* sub:subNoServerDecl {return concat([e], sub);}
  / '*' {return ['*'];}
  / 'all'{return ['*'];}
  / e:ENTITYNAME {return [e];}


// angularSuffix option
angularSuffixDecl
  = 'angularSuffix' space* decl:entityList space* ex:exclusion? space* JDLComment? {
    angularSuffix[decl[decl.length - 1]] = angularSuffix[decl[decl.length - 1]] || { list: [], excluded: [] };
    addUniqueElements(angularSuffix[decl[decl.length - 1]].list, decl.slice(0, decl.length - 1));
    if (ex) {
        addUniqueElements(angularSuffix[decl[decl.length - 1]].excluded, ex);
    }
  }

// common way to declare an entity list
entityList
  = e:ENTITYNAME space* ',' space* sub:entityList {return addUniqueElements([e], sub);}
  / '*' space* 'with' space* method:([A-z0-9-]+) {return ['*', method.toString().replace(/,/g,'')];}
  / 'all' space* 'with' space* method:([A-z0-9-]+) {return ['*', method.toString().replace(/,/g,'')];}
  / e:ENTITYNAME space* 'with' space* method:([A-z0-9-]+) {return [e, method.toString().replace(/,/g,'')];}


relationshipType = 'OneToOne' {return 'one-to-one';} / 'OneToMany' {return 'one-to-many';} / 'ManyToOne' {return 'many-to-one';} / 'ManyToMany' {return 'many-to-many';}

type 'a type' = head:[A-Z]tail:[a-zA-Z0-9]* {return head + tail.join('');}

validation
  = 'required' {return {key:'required', value:''};}
  / 'minlength' space* '(' space* int:INTEGER space* ')' {return {key:'minlength', value:int};}
  / 'maxlength' space* '(' space* int:INTEGER space* ')' {return {key:'maxlength', value:int};}
  / 'minbytes' space* '(' space* int:INTEGER space* ')' {return {key:'minbytes', value:int};}
  / 'maxbytes' space* '(' space* int:INTEGER space* ')' {return {key:'maxbytes', value:int};}
  / 'max' space* '(' space* int:INTEGER space* ')' {return {key:'max', value:int};}
  / 'min' space* '(' space* int:INTEGER space* ')' {return {key:'min', value:int};}
  / 'pattern' space* '('  apostrophe regex:REGEX  apostrophe space* ')' {return {key:'pattern' , value:regex};}

REGEX = word:[A-z0-9!@#$%^&*()_+\-=\[\]{};':\\|,.<>\/? ]* { return word.join('') }
ENUMNAME = head:[A-Z]tail:[A-z0-9]* { return head + tail.join(''); }
ENUMPROP = underscore:[_]*head:[A-Z0-9]tail:[A-Z0-9_]* {
    return underscore.join('') + head + tail.join('');
  }
INTEGER = negative:'-'?int:[0-9]+ { return parseInt((negative ? negative: '') + int.join(''), 10); }
INJECTEDFIELDNAME = head:[a-zA-Z]tail:[a-zA-Z0-9()]* {return head + tail.join('');}
ENTITYNAME = head:[A-Z]tail:[a-zA-Z0-9]* {return head + tail.join('');}
FIELDNAME = head:[a-zA-Z]tail:[a-zA-Z0-9]* {return head + tail.join('');}
space = space:['\n'|'\t'|'\r'|' '|\u2028|\u2029]+
apostrophe = a:["|']

// Comments
Comment = ComStart nc:Not_Com* ComStop {return nc.join('');}
ComStart = '/*' [*]*
ComStop = [*]+ '/'
// a completely ignored comment, will not be a Javadoc comment
JDLComment = '//' [^\n\r]*
Not_Com = !ComStop !ComStart char:. {return char;}
